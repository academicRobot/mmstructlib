/* Generated by Cython 0.29.15 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "src/cif/block.hpp",
            "src/cif/check_optional.hpp",
            "src/cif/file.hpp",
            "src/cif/parse.hpp",
            "src/cif/save.hpp",
            "src/cif/table.hpp",
            "src/vendor/boost_1.63/boost/optional.hpp"
        ],
        "extra_compile_args": [
            "-O3",
            "-march=native",
            "-DNDEBUG",
            "-fno-strict-aliasing",
            "-fwrapv",
            "-std=c++11"
        ],
        "include_dirs": [
            "src/",
            "src/vendor/boost_1.63/"
        ],
        "language": "c++",
        "name": "mmstructlib.IO.cif_parser",
        "sources": [
            "mmstructlib/IO/cif_parser.pyx"
        ]
    },
    "module_name": "mmstructlib.IO.cif_parser"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_15"
#define CYTHON_HEX_VERSION 0x001D0FF0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
  #define PyObject_Unicode             PyObject_Str
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__mmstructlib__IO__cif_parser
#define __PYX_HAVE_API__mmstructlib__IO__cif_parser
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <utility>
#include <map>
#include <string.h>
#include <string>
#include "boost/optional.hpp"
#include "cif/check_optional.hpp"
#include "cif/table.hpp"
#include "cif/save.hpp"
#include "cif/block.hpp"
#include "cif/file.hpp"
#include "cif/parse.hpp"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "mmstructlib/IO/cif_parser.pyx",
  "stringsource",
};

/*--- Type declarations ---*/
struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Row;
struct __pyx_obj_11mmstructlib_2IO_10cif_parser__CellsIterator;
struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Cells;
struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Table;
struct __pyx_obj_11mmstructlib_2IO_10cif_parser__TableVector;
struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Save;
struct __pyx_obj_11mmstructlib_2IO_10cif_parser__SaveVector;
struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Block;
struct __pyx_obj_11mmstructlib_2IO_10cif_parser__BlockVector;
struct __pyx_obj_11mmstructlib_2IO_10cif_parser_File;

/* "mmstructlib/IO/cif_parser.pyx":10
 * from cython.operator cimport dereference as deref
 * 
 * ctypedef const char* const_char_ptr             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "boost/optional.hpp" namespace "boost":
 */
typedef char const *__pyx_t_11mmstructlib_2IO_10cif_parser_const_char_ptr;

/* "mmstructlib/IO/cif_parser.pyx":49
 *     return (bytes(optstr.get())).decode('UTF-8') if check_optional(optstr) else None
 * 
 * ctypedef optional[string]* OptStrPtr             # <<<<<<<<<<<<<<
 * 
 * cdef class _Row:
 */
typedef boost::optional<std::string>  *__pyx_t_11mmstructlib_2IO_10cif_parser_OptStrPtr;

/* "mmstructlib/IO/cif_parser.pyx":51
 * ctypedef optional[string]* OptStrPtr
 * 
 * cdef class _Row:             # <<<<<<<<<<<<<<
 *     cdef object filePyobj #keep a pointer to file to keep it alive
 *     cdef OptStrPtr row_ptr
 */
struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Row {
  PyObject_HEAD
  PyObject *filePyobj;
  __pyx_t_11mmstructlib_2IO_10cif_parser_OptStrPtr row_ptr;
  size_t num_col;
};


/* "mmstructlib/IO/cif_parser.pyx":70
 *     return obj
 * 
 * cdef class _CellsIterator:             # <<<<<<<<<<<<<<
 *     cdef object filePyobj #keep a pointer to file to keep it alive
 *     cdef OptStrPtr ptr
 */
struct __pyx_obj_11mmstructlib_2IO_10cif_parser__CellsIterator {
  PyObject_HEAD
  PyObject *filePyobj;
  __pyx_t_11mmstructlib_2IO_10cif_parser_OptStrPtr ptr;
  __pyx_t_11mmstructlib_2IO_10cif_parser_OptStrPtr end_ptr;
  size_t num_col;
};


/* "mmstructlib/IO/cif_parser.pyx":91
 *     return obj
 * 
 * cdef class _Cells:             # <<<<<<<<<<<<<<
 *     cdef object filePyobj #keep a pointer to file to keep it alive
 *     cdef OptStrPtr cell_ptr
 */
struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Cells {
  PyObject_HEAD
  PyObject *filePyobj;
  __pyx_t_11mmstructlib_2IO_10cif_parser_OptStrPtr cell_ptr;
  size_t num_col;
  size_t num_row;
};


/* "mmstructlib/IO/cif_parser.pyx":114
 *     return obj
 * 
 * cdef class _Table:             # <<<<<<<<<<<<<<
 *     cdef object filePyobj #keep a pointer to file to keep it alive
 *     cdef table[string]* thisptr
 */
struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Table {
  PyObject_HEAD
  PyObject *filePyobj;
  cif::table<std::string>  *thisptr;
  std::map<std::string,size_t>  column_index;
  size_t num_col;
  size_t num_row;
};


/* "mmstructlib/IO/cif_parser.pyx":156
 *     return obj
 * 
 * cdef class _TableVector:             # <<<<<<<<<<<<<<
 *     cdef object filePyobj #keep a pointer to file to keep it alive
 *     cdef vector[table[string]]* thisptr
 */
struct __pyx_obj_11mmstructlib_2IO_10cif_parser__TableVector {
  PyObject_HEAD
  PyObject *filePyobj;
  std::vector<cif::table<std::string> >  *thisptr;
  std::map<std::string,size_t>  table_index;
};


/* "mmstructlib/IO/cif_parser.pyx":195
 *     return obj
 * 
 * cdef class _Save:             # <<<<<<<<<<<<<<
 *     cdef object filePyobj #keep a pointer to file to keep it alive
 *     cdef save[string]* thisptr
 */
struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Save {
  PyObject_HEAD
  PyObject *filePyobj;
  cif::save<std::string>  *thisptr;
};


/* "mmstructlib/IO/cif_parser.pyx":215
 *     return obj
 * 
 * cdef class _SaveVector:             # <<<<<<<<<<<<<<
 *     cdef object filePyobj #keep a pointer to file to keep it alive
 *     cdef vector[save[string]]* thisptr
 */
struct __pyx_obj_11mmstructlib_2IO_10cif_parser__SaveVector {
  PyObject_HEAD
  PyObject *filePyobj;
  std::vector<cif::save<std::string> >  *thisptr;
};


/* "mmstructlib/IO/cif_parser.pyx":232
 *     return obj
 * 
 * cdef class _Block:             # <<<<<<<<<<<<<<
 *     cdef object filePyobj #keep a pointer to file to keep it alive
 *     cdef block[string]* thisptr
 */
struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Block {
  PyObject_HEAD
  PyObject *filePyobj;
  cif::block<std::string>  *thisptr;
};


/* "mmstructlib/IO/cif_parser.pyx":252
 *     return obj
 * 
 * cdef class _BlockVector:             # <<<<<<<<<<<<<<
 *     cdef object filePyobj #keep a pointer to file to keep it alive
 *     cdef vector[block[string]]* thisptr
 */
struct __pyx_obj_11mmstructlib_2IO_10cif_parser__BlockVector {
  PyObject_HEAD
  PyObject *filePyobj;
  std::vector<cif::block<std::string> >  *thisptr;
};


/* "mmstructlib/IO/cif_parser.pyx":269
 *     return obj
 * 
 * cdef class File:             # <<<<<<<<<<<<<<
 *     cdef file[string] fileObj
 *     property blocks:
 */
struct __pyx_obj_11mmstructlib_2IO_10cif_parser_File {
  PyObject_HEAD
  cif::file<std::string>  fileObj;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_bytes.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* decode_bytes.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_bytes(
         PyObject* string, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    return __Pyx_decode_c_bytes(
        PyBytes_AS_STRING(string), PyBytes_GET_SIZE(string),
        start, stop, encoding, errors, decode_func);
}

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* IncludeCppStringH.proto */
#include <string>

/* decode_cpp_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_cpp_string(
         std::string cppstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    return __Pyx_decode_c_bytes(
        cppstring.data(), cppstring.size(), start, stop, encoding, errors, decode_func);
}

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunction.proto */
#define __Pyx_CyFunction_USED 1
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_Check(obj)  (__Pyx_TypeCheck(obj, __pyx_CyFunctionType))
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code)\
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'mmstructlib.IO.cif_parser' */
static PyTypeObject *__pyx_ptype_11mmstructlib_2IO_10cif_parser__Row = 0;
static PyTypeObject *__pyx_ptype_11mmstructlib_2IO_10cif_parser__CellsIterator = 0;
static PyTypeObject *__pyx_ptype_11mmstructlib_2IO_10cif_parser__Cells = 0;
static PyTypeObject *__pyx_ptype_11mmstructlib_2IO_10cif_parser__Table = 0;
static PyTypeObject *__pyx_ptype_11mmstructlib_2IO_10cif_parser__TableVector = 0;
static PyTypeObject *__pyx_ptype_11mmstructlib_2IO_10cif_parser__Save = 0;
static PyTypeObject *__pyx_ptype_11mmstructlib_2IO_10cif_parser__SaveVector = 0;
static PyTypeObject *__pyx_ptype_11mmstructlib_2IO_10cif_parser__Block = 0;
static PyTypeObject *__pyx_ptype_11mmstructlib_2IO_10cif_parser__BlockVector = 0;
static PyTypeObject *__pyx_ptype_11mmstructlib_2IO_10cif_parser_File = 0;
static PyObject *__pyx_f_11mmstructlib_2IO_10cif_parser_processOptional(boost::optional<std::string>  const &); /*proto*/
static PyObject *__pyx_f_11mmstructlib_2IO_10cif_parser_Row(PyObject *, size_t, __pyx_t_11mmstructlib_2IO_10cif_parser_OptStrPtr); /*proto*/
static PyObject *__pyx_f_11mmstructlib_2IO_10cif_parser_CellsIterator(PyObject *, size_t, __pyx_t_11mmstructlib_2IO_10cif_parser_OptStrPtr, __pyx_t_11mmstructlib_2IO_10cif_parser_OptStrPtr); /*proto*/
static PyObject *__pyx_f_11mmstructlib_2IO_10cif_parser_Cells(PyObject *, size_t, size_t, __pyx_t_11mmstructlib_2IO_10cif_parser_OptStrPtr); /*proto*/
static PyObject *__pyx_f_11mmstructlib_2IO_10cif_parser_Table(PyObject *, cif::table<std::string>  *); /*proto*/
static PyObject *__pyx_f_11mmstructlib_2IO_10cif_parser_TableVector(PyObject *, std::vector<cif::table<std::string> >  *); /*proto*/
static PyObject *__pyx_f_11mmstructlib_2IO_10cif_parser_Save(PyObject *, cif::save<std::string>  *); /*proto*/
static PyObject *__pyx_f_11mmstructlib_2IO_10cif_parser_SaveVector(PyObject *, std::vector<cif::save<std::string> >  *); /*proto*/
static PyObject *__pyx_f_11mmstructlib_2IO_10cif_parser_Block(PyObject *, cif::block<std::string>  *); /*proto*/
static PyObject *__pyx_f_11mmstructlib_2IO_10cif_parser_BlockVector(PyObject *, std::vector<cif::block<std::string> >  *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_string(const std::vector<std::string>  &); /*proto*/
#define __Pyx_MODULE_NAME "mmstructlib.IO.cif_parser"
extern int __pyx_module_is_main_mmstructlib__IO__cif_parser;
int __pyx_module_is_main_mmstructlib__IO__cif_parser = 0;

/* Implementation of 'mmstructlib.IO.cif_parser' */
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_IndexError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_StopIteration;
static PyObject *__pyx_builtin_map;
static PyObject *__pyx_builtin_range;
static const char __pyx_k_Row[] = "_Row";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_map[] = "map";
static const char __pyx_k_ptr[] = "ptr";
static const char __pyx_k_row[] = "row";
static const char __pyx_k_File[] = "File";
static const char __pyx_k_Save[] = "_Save";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_Block[] = "_Block";
static const char __pyx_k_Cells[] = "_Cells";
static const char __pyx_k_Table[] = "_Table";
static const char __pyx_k_UTF_8[] = "UTF-8";
static const char __pyx_k_parse[] = "parse";
static const char __pyx_k_pyobj[] = "pyobj";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_decode[] = "decode";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_default[] = "default";
static const char __pyx_k_fileObj[] = "fileObj";
static const char __pyx_k_key_str[] = "key_str";
static const char __pyx_k_objbuff[] = "objbuff";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_SaveVector[] = "_SaveVector";
static const char __pyx_k_BlockVector[] = "_BlockVector";
static const char __pyx_k_TableVector[] = "_TableVector";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_CellsIterator[] = "_CellsIterator";
static const char __pyx_k_StopIteration[] = "StopIteration";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_Row_index_out_of_range[] = "Row index out of range";
static const char __pyx_k_Do_not_construct_directly[] = "Do not construct directly";
static const char __pyx_k_mmstructlib_IO_cif_parser[] = "mmstructlib.IO.cif_parser";
static const char __pyx_k_Inconsistent_buffer_object[] = "Inconsistent buffer object";
static const char __pyx_k_TableVector_name_not_found[] = "TableVector: name '{}' not found";
static const char __pyx_k_Table___get___locals_lambda[] = "_Table.__get__.<locals>.<lambda>";
static const char __pyx_k_Cells_row_index_out_of_range[] = "Cells row index out of range";
static const char __pyx_k_mmstructlib_IO_cif_parser_pyx[] = "mmstructlib/IO/cif_parser.pyx";
static const char __pyx_k_BlockVector_index_out_of_range[] = "BlockVector index out of range";
static const char __pyx_k_self_end_ptr_self_ptr_cannot_be[] = "self.end_ptr,self.ptr cannot be converted to a Python object for pickling";
static const char __pyx_k_SaveVector_row_index_out_of_rang[] = "SaveVector row index out of range";
static const char __pyx_k_TableVector_getitem_takes_int_or[] = "TableVector getitem takes int or str";
static const char __pyx_k_TableVector_row_index_out_of_ran[] = "TableVector row index out of range";
static const char __pyx_k_Table_data_size_not_a_multiple_o[] = "Table data size not a multiple of columns";
static const char __pyx_k_argument_does_not_support_buffer[] = "argument does not support buffers";
static const char __pyx_k_self_cell_ptr_cannot_be_converte[] = "self.cell_ptr cannot be converted to a Python object for pickling";
static const char __pyx_k_self_fileObj_cannot_be_converted[] = "self.fileObj cannot be converted to a Python object for pickling";
static const char __pyx_k_self_row_ptr_cannot_be_converted[] = "self.row_ptr cannot be converted to a Python object for pickling";
static const char __pyx_k_self_thisptr_cannot_be_converted[] = "self.thisptr cannot be converted to a Python object for pickling";
static PyObject *__pyx_n_s_Block;
static PyObject *__pyx_n_s_BlockVector;
static PyObject *__pyx_kp_s_BlockVector_index_out_of_range;
static PyObject *__pyx_n_s_Cells;
static PyObject *__pyx_n_s_CellsIterator;
static PyObject *__pyx_kp_s_Cells_row_index_out_of_range;
static PyObject *__pyx_kp_s_Do_not_construct_directly;
static PyObject *__pyx_n_s_File;
static PyObject *__pyx_kp_s_Inconsistent_buffer_object;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_n_s_Row;
static PyObject *__pyx_kp_s_Row_index_out_of_range;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_Save;
static PyObject *__pyx_n_s_SaveVector;
static PyObject *__pyx_kp_s_SaveVector_row_index_out_of_rang;
static PyObject *__pyx_n_s_StopIteration;
static PyObject *__pyx_n_s_Table;
static PyObject *__pyx_n_s_TableVector;
static PyObject *__pyx_kp_s_TableVector_getitem_takes_int_or;
static PyObject *__pyx_kp_s_TableVector_name_not_found;
static PyObject *__pyx_kp_s_TableVector_row_index_out_of_ran;
static PyObject *__pyx_n_s_Table___get___locals_lambda;
static PyObject *__pyx_kp_s_Table_data_size_not_a_multiple_o;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_UTF_8;
static PyObject *__pyx_kp_s_argument_does_not_support_buffer;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_decode;
static PyObject *__pyx_n_s_default;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_fileObj;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_key_str;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_map;
static PyObject *__pyx_n_s_mmstructlib_IO_cif_parser;
static PyObject *__pyx_kp_s_mmstructlib_IO_cif_parser_pyx;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_s_objbuff;
static PyObject *__pyx_n_s_parse;
static PyObject *__pyx_n_s_ptr;
static PyObject *__pyx_n_s_pyobj;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_row;
static PyObject *__pyx_kp_s_self_cell_ptr_cannot_be_converte;
static PyObject *__pyx_kp_s_self_end_ptr_self_ptr_cannot_be;
static PyObject *__pyx_kp_s_self_fileObj_cannot_be_converted;
static PyObject *__pyx_kp_s_self_row_ptr_cannot_be_converted;
static PyObject *__pyx_kp_s_self_thisptr_cannot_be_converted;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_test;
static int __pyx_pf_11mmstructlib_2IO_10cif_parser_4_Row___init__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Row *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_4_Row_2__getitem__(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Row *__pyx_v_self, size_t __pyx_v_i); /* proto */
static Py_ssize_t __pyx_pf_11mmstructlib_2IO_10cif_parser_4_Row_4__len__(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Row *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_4_Row_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Row *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_4_Row_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Row *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_11mmstructlib_2IO_10cif_parser_14_CellsIterator___init__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__CellsIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_14_CellsIterator_2__next__(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__CellsIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_14_CellsIterator_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__CellsIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_14_CellsIterator_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__CellsIterator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_11mmstructlib_2IO_10cif_parser_6_Cells___init__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Cells *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_6_Cells_2__getitem__(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Cells *__pyx_v_self, size_t __pyx_v_i); /* proto */
static Py_ssize_t __pyx_pf_11mmstructlib_2IO_10cif_parser_6_Cells_4__len__(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Cells *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_6_Cells_6__iter__(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Cells *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_6_Cells_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Cells *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_6_Cells_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Cells *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_11mmstructlib_2IO_10cif_parser_6_Table___init__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Table *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_6_Table_2index(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Table *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_6_Table_4field(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Table *__pyx_v_self, PyObject *__pyx_v_name, size_t __pyx_v_row); /* proto */
static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_6_Table_4name___get__(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Table *__pyx_v_self); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_6_Table_10cell_names___get__(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Table *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_6_Table_5cells___get__(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Table *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_6_Table_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Table *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_6_Table_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Table *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_11mmstructlib_2IO_10cif_parser_12_TableVector___init__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__TableVector *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_12_TableVector_2__getitem__(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__TableVector *__pyx_v_self, PyObject *__pyx_v_table_id); /* proto */
static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_12_TableVector_4get(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__TableVector *__pyx_v_self, PyObject *__pyx_v_key_str, PyObject *__pyx_v_default); /* proto */
static int __pyx_pf_11mmstructlib_2IO_10cif_parser_12_TableVector_6__contains__(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__TableVector *__pyx_v_self, PyObject *__pyx_v_key_str); /* proto */
static Py_ssize_t __pyx_pf_11mmstructlib_2IO_10cif_parser_12_TableVector_8__len__(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__TableVector *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_12_TableVector_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__TableVector *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_12_TableVector_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__TableVector *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_11mmstructlib_2IO_10cif_parser_5_Save___init__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Save *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_5_Save_3tag___get__(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Save *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_5_Save_5field___get__(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Save *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_5_Save_6tables___get__(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Save *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_5_Save_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Save *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_5_Save_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Save *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_11mmstructlib_2IO_10cif_parser_11_SaveVector___init__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__SaveVector *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_11_SaveVector_2__getitem__(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__SaveVector *__pyx_v_self, size_t __pyx_v_i); /* proto */
static Py_ssize_t __pyx_pf_11mmstructlib_2IO_10cif_parser_11_SaveVector_4__len__(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__SaveVector *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_11_SaveVector_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__SaveVector *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_11_SaveVector_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__SaveVector *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_11mmstructlib_2IO_10cif_parser_6_Block___init__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Block *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_6_Block_4name___get__(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Block *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_6_Block_6tables___get__(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Block *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_6_Block_5saves___get__(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Block *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_6_Block_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Block *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_6_Block_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Block *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_11mmstructlib_2IO_10cif_parser_12_BlockVector___init__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__BlockVector *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_12_BlockVector_2__getitem__(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__BlockVector *__pyx_v_self, size_t __pyx_v_i); /* proto */
static Py_ssize_t __pyx_pf_11mmstructlib_2IO_10cif_parser_12_BlockVector_4__len__(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__BlockVector *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_12_BlockVector_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__BlockVector *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_12_BlockVector_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__BlockVector *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_4File_6blocks___get__(struct __pyx_obj_11mmstructlib_2IO_10cif_parser_File *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_4File___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser_File *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_4File_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser_File *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_parse(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pyobj); /* proto */
static PyObject *__pyx_tp_new_11mmstructlib_2IO_10cif_parser__Row(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11mmstructlib_2IO_10cif_parser__CellsIterator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11mmstructlib_2IO_10cif_parser__Cells(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11mmstructlib_2IO_10cif_parser__Table(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11mmstructlib_2IO_10cif_parser__TableVector(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11mmstructlib_2IO_10cif_parser__Save(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11mmstructlib_2IO_10cif_parser__SaveVector(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11mmstructlib_2IO_10cif_parser__Block(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11mmstructlib_2IO_10cif_parser__BlockVector(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11mmstructlib_2IO_10cif_parser_File(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_0;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_codeobj__32;
/* Late includes */

/* "mmstructlib/IO/cif_parser.pyx":46
 *     #void parseString_const_char_ptr "parseString<const char*>"(const_char_ptr it, const_char_ptr endIt, file[string]& fileObj) except +
 * 
 * cdef object processOptional(const optional[string]& optstr):             # <<<<<<<<<<<<<<
 *     return (bytes(optstr.get())).decode('UTF-8') if check_optional(optstr) else None
 * 
 */

static PyObject *__pyx_f_11mmstructlib_2IO_10cif_parser_processOptional(boost::optional<std::string>  const &__pyx_v_optstr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("processOptional", 0);

  /* "mmstructlib/IO/cif_parser.pyx":47
 * 
 * cdef object processOptional(const optional[string]& optstr):
 *     return (bytes(optstr.get())).decode('UTF-8') if check_optional(optstr) else None             # <<<<<<<<<<<<<<
 * 
 * ctypedef optional[string]* OptStrPtr
 */
  __Pyx_XDECREF(__pyx_r);
  if ((check_optional<std::string>(__pyx_v_optstr) != 0)) {
    __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_optstr.get()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyBytes_Type)), __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_decode_bytes(__pyx_t_3, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "mmstructlib/IO/cif_parser.pyx":46
 *     #void parseString_const_char_ptr "parseString<const char*>"(const_char_ptr it, const_char_ptr endIt, file[string]& fileObj) except +
 * 
 * cdef object processOptional(const optional[string]& optstr):             # <<<<<<<<<<<<<<
 *     return (bytes(optstr.get())).decode('UTF-8') if check_optional(optstr) else None
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser.processOptional", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmstructlib/IO/cif_parser.pyx":55
 *     cdef OptStrPtr row_ptr
 *     cdef size_t num_col
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise RuntimeError("Do not construct directly")
 *     def __getitem__(self, size_t i):
 */

/* Python wrapper */
static int __pyx_pw_11mmstructlib_2IO_10cif_parser_4_Row_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_11mmstructlib_2IO_10cif_parser_4_Row_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_4_Row___init__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Row *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11mmstructlib_2IO_10cif_parser_4_Row___init__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Row *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "mmstructlib/IO/cif_parser.pyx":56
 *     cdef size_t num_col
 *     def __init__(self):
 *         raise RuntimeError("Do not construct directly")             # <<<<<<<<<<<<<<
 *     def __getitem__(self, size_t i):
 *         if not 0 <= i < self.num_col:
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 56, __pyx_L1_error)

  /* "mmstructlib/IO/cif_parser.pyx":55
 *     cdef OptStrPtr row_ptr
 *     cdef size_t num_col
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise RuntimeError("Do not construct directly")
 *     def __getitem__(self, size_t i):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._Row.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmstructlib/IO/cif_parser.pyx":57
 *     def __init__(self):
 *         raise RuntimeError("Do not construct directly")
 *     def __getitem__(self, size_t i):             # <<<<<<<<<<<<<<
 *         if not 0 <= i < self.num_col:
 *             raise IndexError("Row index out of range")
 */

/* Python wrapper */
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_4_Row_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_4_Row_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_As_size_t(__pyx_arg_i); if (unlikely((__pyx_v_i == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 57, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._Row.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_4_Row_2__getitem__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Row *)__pyx_v_self), ((size_t)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_4_Row_2__getitem__(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Row *__pyx_v_self, size_t __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "mmstructlib/IO/cif_parser.pyx":58
 *         raise RuntimeError("Do not construct directly")
 *     def __getitem__(self, size_t i):
 *         if not 0 <= i < self.num_col:             # <<<<<<<<<<<<<<
 *             raise IndexError("Row index out of range")
 *         return processOptional(deref(self.row_ptr+i))
 */
  __pyx_t_1 = (0 <= __pyx_v_i);
  if (__pyx_t_1) {
    __pyx_t_1 = (__pyx_v_i < __pyx_v_self->num_col);
  }
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "mmstructlib/IO/cif_parser.pyx":59
 *     def __getitem__(self, size_t i):
 *         if not 0 <= i < self.num_col:
 *             raise IndexError("Row index out of range")             # <<<<<<<<<<<<<<
 *         return processOptional(deref(self.row_ptr+i))
 *     def __len__(self):
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 59, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 59, __pyx_L1_error)

    /* "mmstructlib/IO/cif_parser.pyx":58
 *         raise RuntimeError("Do not construct directly")
 *     def __getitem__(self, size_t i):
 *         if not 0 <= i < self.num_col:             # <<<<<<<<<<<<<<
 *             raise IndexError("Row index out of range")
 *         return processOptional(deref(self.row_ptr+i))
 */
  }

  /* "mmstructlib/IO/cif_parser.pyx":60
 *         if not 0 <= i < self.num_col:
 *             raise IndexError("Row index out of range")
 *         return processOptional(deref(self.row_ptr+i))             # <<<<<<<<<<<<<<
 *     def __len__(self):
 *         return self.num_col
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_f_11mmstructlib_2IO_10cif_parser_processOptional((*(__pyx_v_self->row_ptr + __pyx_v_i))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "mmstructlib/IO/cif_parser.pyx":57
 *     def __init__(self):
 *         raise RuntimeError("Do not construct directly")
 *     def __getitem__(self, size_t i):             # <<<<<<<<<<<<<<
 *         if not 0 <= i < self.num_col:
 *             raise IndexError("Row index out of range")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._Row.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmstructlib/IO/cif_parser.pyx":61
 *             raise IndexError("Row index out of range")
 *         return processOptional(deref(self.row_ptr+i))
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.num_col
 * cdef object Row(object filePyobj, size_t num_col, OptStrPtr row_ptr):
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_11mmstructlib_2IO_10cif_parser_4_Row_5__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_11mmstructlib_2IO_10cif_parser_4_Row_5__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_4_Row_4__len__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Row *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_11mmstructlib_2IO_10cif_parser_4_Row_4__len__(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Row *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "mmstructlib/IO/cif_parser.pyx":62
 *         return processOptional(deref(self.row_ptr+i))
 *     def __len__(self):
 *         return self.num_col             # <<<<<<<<<<<<<<
 * cdef object Row(object filePyobj, size_t num_col, OptStrPtr row_ptr):
 *     cdef _Row obj = _Row.__new__(_Row)
 */
  __pyx_r = __pyx_v_self->num_col;
  goto __pyx_L0;

  /* "mmstructlib/IO/cif_parser.pyx":61
 *             raise IndexError("Row index out of range")
 *         return processOptional(deref(self.row_ptr+i))
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.num_col
 * cdef object Row(object filePyobj, size_t num_col, OptStrPtr row_ptr):
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.row_ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_4_Row_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_4_Row_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_4_Row_6__reduce_cython__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Row *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_4_Row_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Row *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.row_ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.row_ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.row_ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._Row.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.row_ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.row_ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_4_Row_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_4_Row_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_4_Row_8__setstate_cython__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Row *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_4_Row_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Row *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.row_ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.row_ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.row_ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.row_ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._Row.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmstructlib/IO/cif_parser.pyx":63
 *     def __len__(self):
 *         return self.num_col
 * cdef object Row(object filePyobj, size_t num_col, OptStrPtr row_ptr):             # <<<<<<<<<<<<<<
 *     cdef _Row obj = _Row.__new__(_Row)
 *     obj.filePyobj = filePyobj
 */

static PyObject *__pyx_f_11mmstructlib_2IO_10cif_parser_Row(PyObject *__pyx_v_filePyobj, size_t __pyx_v_num_col, __pyx_t_11mmstructlib_2IO_10cif_parser_OptStrPtr __pyx_v_row_ptr) {
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Row *__pyx_v_obj = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("Row", 0);

  /* "mmstructlib/IO/cif_parser.pyx":64
 *         return self.num_col
 * cdef object Row(object filePyobj, size_t num_col, OptStrPtr row_ptr):
 *     cdef _Row obj = _Row.__new__(_Row)             # <<<<<<<<<<<<<<
 *     obj.filePyobj = filePyobj
 *     obj.row_ptr = row_ptr
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_11mmstructlib_2IO_10cif_parser__Row(((PyTypeObject *)__pyx_ptype_11mmstructlib_2IO_10cif_parser__Row), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_obj = ((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Row *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mmstructlib/IO/cif_parser.pyx":65
 * cdef object Row(object filePyobj, size_t num_col, OptStrPtr row_ptr):
 *     cdef _Row obj = _Row.__new__(_Row)
 *     obj.filePyobj = filePyobj             # <<<<<<<<<<<<<<
 *     obj.row_ptr = row_ptr
 *     obj.num_col = num_col
 */
  __Pyx_INCREF(__pyx_v_filePyobj);
  __Pyx_GIVEREF(__pyx_v_filePyobj);
  __Pyx_GOTREF(__pyx_v_obj->filePyobj);
  __Pyx_DECREF(__pyx_v_obj->filePyobj);
  __pyx_v_obj->filePyobj = __pyx_v_filePyobj;

  /* "mmstructlib/IO/cif_parser.pyx":66
 *     cdef _Row obj = _Row.__new__(_Row)
 *     obj.filePyobj = filePyobj
 *     obj.row_ptr = row_ptr             # <<<<<<<<<<<<<<
 *     obj.num_col = num_col
 *     return obj
 */
  __pyx_v_obj->row_ptr = __pyx_v_row_ptr;

  /* "mmstructlib/IO/cif_parser.pyx":67
 *     obj.filePyobj = filePyobj
 *     obj.row_ptr = row_ptr
 *     obj.num_col = num_col             # <<<<<<<<<<<<<<
 *     return obj
 * 
 */
  __pyx_v_obj->num_col = __pyx_v_num_col;

  /* "mmstructlib/IO/cif_parser.pyx":68
 *     obj.row_ptr = row_ptr
 *     obj.num_col = num_col
 *     return obj             # <<<<<<<<<<<<<<
 * 
 * cdef class _CellsIterator:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_obj));
  __pyx_r = ((PyObject *)__pyx_v_obj);
  goto __pyx_L0;

  /* "mmstructlib/IO/cif_parser.pyx":63
 *     def __len__(self):
 *         return self.num_col
 * cdef object Row(object filePyobj, size_t num_col, OptStrPtr row_ptr):             # <<<<<<<<<<<<<<
 *     cdef _Row obj = _Row.__new__(_Row)
 *     obj.filePyobj = filePyobj
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser.Row", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmstructlib/IO/cif_parser.pyx":75
 *     cdef OptStrPtr end_ptr
 *     cdef size_t num_col
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise RuntimeError("Do not construct directly")
 *     def __next__(self):
 */

/* Python wrapper */
static int __pyx_pw_11mmstructlib_2IO_10cif_parser_14_CellsIterator_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_11mmstructlib_2IO_10cif_parser_14_CellsIterator_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_14_CellsIterator___init__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__CellsIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11mmstructlib_2IO_10cif_parser_14_CellsIterator___init__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__CellsIterator *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "mmstructlib/IO/cif_parser.pyx":76
 *     cdef size_t num_col
 *     def __init__(self):
 *         raise RuntimeError("Do not construct directly")             # <<<<<<<<<<<<<<
 *     def __next__(self):
 *         if self.ptr >= self.end_ptr:
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 76, __pyx_L1_error)

  /* "mmstructlib/IO/cif_parser.pyx":75
 *     cdef OptStrPtr end_ptr
 *     cdef size_t num_col
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise RuntimeError("Do not construct directly")
 *     def __next__(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._CellsIterator.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmstructlib/IO/cif_parser.pyx":77
 *     def __init__(self):
 *         raise RuntimeError("Do not construct directly")
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         if self.ptr >= self.end_ptr:
 *             raise StopIteration
 */

/* Python wrapper */
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_14_CellsIterator_3__next__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_14_CellsIterator_3__next__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__next__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_14_CellsIterator_2__next__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__CellsIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_14_CellsIterator_2__next__(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__CellsIterator *__pyx_v_self) {
  PyObject *__pyx_v_next_row = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__next__", 0);

  /* "mmstructlib/IO/cif_parser.pyx":78
 *         raise RuntimeError("Do not construct directly")
 *     def __next__(self):
 *         if self.ptr >= self.end_ptr:             # <<<<<<<<<<<<<<
 *             raise StopIteration
 *         next_row = Row(self.filePyobj, self.num_col, self.ptr)
 */
  __pyx_t_1 = ((__pyx_v_self->ptr >= __pyx_v_self->end_ptr) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "mmstructlib/IO/cif_parser.pyx":79
 *     def __next__(self):
 *         if self.ptr >= self.end_ptr:
 *             raise StopIteration             # <<<<<<<<<<<<<<
 *         next_row = Row(self.filePyobj, self.num_col, self.ptr)
 *         self.ptr += self.num_col
 */
    __Pyx_Raise(__pyx_builtin_StopIteration, 0, 0, 0);
    __PYX_ERR(0, 79, __pyx_L1_error)

    /* "mmstructlib/IO/cif_parser.pyx":78
 *         raise RuntimeError("Do not construct directly")
 *     def __next__(self):
 *         if self.ptr >= self.end_ptr:             # <<<<<<<<<<<<<<
 *             raise StopIteration
 *         next_row = Row(self.filePyobj, self.num_col, self.ptr)
 */
  }

  /* "mmstructlib/IO/cif_parser.pyx":80
 *         if self.ptr >= self.end_ptr:
 *             raise StopIteration
 *         next_row = Row(self.filePyobj, self.num_col, self.ptr)             # <<<<<<<<<<<<<<
 *         self.ptr += self.num_col
 *         return next_row
 */
  __pyx_t_2 = __pyx_v_self->filePyobj;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = __pyx_f_11mmstructlib_2IO_10cif_parser_Row(__pyx_t_2, __pyx_v_self->num_col, __pyx_v_self->ptr); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_next_row = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "mmstructlib/IO/cif_parser.pyx":81
 *             raise StopIteration
 *         next_row = Row(self.filePyobj, self.num_col, self.ptr)
 *         self.ptr += self.num_col             # <<<<<<<<<<<<<<
 *         return next_row
 * cdef object CellsIterator(object filePyobj, size_t num_col, OptStrPtr ptr, OptStrPtr end_ptr):
 */
  __pyx_v_self->ptr = (__pyx_v_self->ptr + __pyx_v_self->num_col);

  /* "mmstructlib/IO/cif_parser.pyx":82
 *         next_row = Row(self.filePyobj, self.num_col, self.ptr)
 *         self.ptr += self.num_col
 *         return next_row             # <<<<<<<<<<<<<<
 * cdef object CellsIterator(object filePyobj, size_t num_col, OptStrPtr ptr, OptStrPtr end_ptr):
 *     cdef _CellsIterator obj = _CellsIterator.__new__(_CellsIterator)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_next_row);
  __pyx_r = __pyx_v_next_row;
  goto __pyx_L0;

  /* "mmstructlib/IO/cif_parser.pyx":77
 *     def __init__(self):
 *         raise RuntimeError("Do not construct directly")
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         if self.ptr >= self.end_ptr:
 *             raise StopIteration
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._CellsIterator.__next__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_next_row);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.end_ptr,self.ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_14_CellsIterator_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_14_CellsIterator_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_14_CellsIterator_4__reduce_cython__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__CellsIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_14_CellsIterator_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__CellsIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.end_ptr,self.ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.end_ptr,self.ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.end_ptr,self.ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._CellsIterator.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.end_ptr,self.ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.end_ptr,self.ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_14_CellsIterator_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_14_CellsIterator_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_14_CellsIterator_6__setstate_cython__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__CellsIterator *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_14_CellsIterator_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__CellsIterator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.end_ptr,self.ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.end_ptr,self.ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.end_ptr,self.ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.end_ptr,self.ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._CellsIterator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmstructlib/IO/cif_parser.pyx":83
 *         self.ptr += self.num_col
 *         return next_row
 * cdef object CellsIterator(object filePyobj, size_t num_col, OptStrPtr ptr, OptStrPtr end_ptr):             # <<<<<<<<<<<<<<
 *     cdef _CellsIterator obj = _CellsIterator.__new__(_CellsIterator)
 *     obj.filePyobj = filePyobj
 */

static PyObject *__pyx_f_11mmstructlib_2IO_10cif_parser_CellsIterator(PyObject *__pyx_v_filePyobj, size_t __pyx_v_num_col, __pyx_t_11mmstructlib_2IO_10cif_parser_OptStrPtr __pyx_v_ptr, __pyx_t_11mmstructlib_2IO_10cif_parser_OptStrPtr __pyx_v_end_ptr) {
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser__CellsIterator *__pyx_v_obj = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("CellsIterator", 0);

  /* "mmstructlib/IO/cif_parser.pyx":84
 *         return next_row
 * cdef object CellsIterator(object filePyobj, size_t num_col, OptStrPtr ptr, OptStrPtr end_ptr):
 *     cdef _CellsIterator obj = _CellsIterator.__new__(_CellsIterator)             # <<<<<<<<<<<<<<
 *     obj.filePyobj = filePyobj
 *     obj.ptr = ptr
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_11mmstructlib_2IO_10cif_parser__CellsIterator(((PyTypeObject *)__pyx_ptype_11mmstructlib_2IO_10cif_parser__CellsIterator), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_obj = ((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__CellsIterator *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mmstructlib/IO/cif_parser.pyx":85
 * cdef object CellsIterator(object filePyobj, size_t num_col, OptStrPtr ptr, OptStrPtr end_ptr):
 *     cdef _CellsIterator obj = _CellsIterator.__new__(_CellsIterator)
 *     obj.filePyobj = filePyobj             # <<<<<<<<<<<<<<
 *     obj.ptr = ptr
 *     obj.end_ptr = end_ptr
 */
  __Pyx_INCREF(__pyx_v_filePyobj);
  __Pyx_GIVEREF(__pyx_v_filePyobj);
  __Pyx_GOTREF(__pyx_v_obj->filePyobj);
  __Pyx_DECREF(__pyx_v_obj->filePyobj);
  __pyx_v_obj->filePyobj = __pyx_v_filePyobj;

  /* "mmstructlib/IO/cif_parser.pyx":86
 *     cdef _CellsIterator obj = _CellsIterator.__new__(_CellsIterator)
 *     obj.filePyobj = filePyobj
 *     obj.ptr = ptr             # <<<<<<<<<<<<<<
 *     obj.end_ptr = end_ptr
 *     obj.num_col = num_col
 */
  __pyx_v_obj->ptr = __pyx_v_ptr;

  /* "mmstructlib/IO/cif_parser.pyx":87
 *     obj.filePyobj = filePyobj
 *     obj.ptr = ptr
 *     obj.end_ptr = end_ptr             # <<<<<<<<<<<<<<
 *     obj.num_col = num_col
 *     return obj
 */
  __pyx_v_obj->end_ptr = __pyx_v_end_ptr;

  /* "mmstructlib/IO/cif_parser.pyx":88
 *     obj.ptr = ptr
 *     obj.end_ptr = end_ptr
 *     obj.num_col = num_col             # <<<<<<<<<<<<<<
 *     return obj
 * 
 */
  __pyx_v_obj->num_col = __pyx_v_num_col;

  /* "mmstructlib/IO/cif_parser.pyx":89
 *     obj.end_ptr = end_ptr
 *     obj.num_col = num_col
 *     return obj             # <<<<<<<<<<<<<<
 * 
 * cdef class _Cells:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_obj));
  __pyx_r = ((PyObject *)__pyx_v_obj);
  goto __pyx_L0;

  /* "mmstructlib/IO/cif_parser.pyx":83
 *         self.ptr += self.num_col
 *         return next_row
 * cdef object CellsIterator(object filePyobj, size_t num_col, OptStrPtr ptr, OptStrPtr end_ptr):             # <<<<<<<<<<<<<<
 *     cdef _CellsIterator obj = _CellsIterator.__new__(_CellsIterator)
 *     obj.filePyobj = filePyobj
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser.CellsIterator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmstructlib/IO/cif_parser.pyx":96
 *     cdef size_t num_col
 *     cdef size_t num_row
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise RuntimeError("Do not construct directly")
 *     def __getitem__(self, size_t i):
 */

/* Python wrapper */
static int __pyx_pw_11mmstructlib_2IO_10cif_parser_6_Cells_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_11mmstructlib_2IO_10cif_parser_6_Cells_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_6_Cells___init__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Cells *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11mmstructlib_2IO_10cif_parser_6_Cells___init__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Cells *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "mmstructlib/IO/cif_parser.pyx":97
 *     cdef size_t num_row
 *     def __init__(self):
 *         raise RuntimeError("Do not construct directly")             # <<<<<<<<<<<<<<
 *     def __getitem__(self, size_t i):
 *         if not 0 <= i < self.num_row:
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 97, __pyx_L1_error)

  /* "mmstructlib/IO/cif_parser.pyx":96
 *     cdef size_t num_col
 *     cdef size_t num_row
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise RuntimeError("Do not construct directly")
 *     def __getitem__(self, size_t i):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._Cells.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmstructlib/IO/cif_parser.pyx":98
 *     def __init__(self):
 *         raise RuntimeError("Do not construct directly")
 *     def __getitem__(self, size_t i):             # <<<<<<<<<<<<<<
 *         if not 0 <= i < self.num_row:
 *             raise IndexError("Cells row index out of range")
 */

/* Python wrapper */
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_6_Cells_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_6_Cells_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_As_size_t(__pyx_arg_i); if (unlikely((__pyx_v_i == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 98, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._Cells.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_6_Cells_2__getitem__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Cells *)__pyx_v_self), ((size_t)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_6_Cells_2__getitem__(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Cells *__pyx_v_self, size_t __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "mmstructlib/IO/cif_parser.pyx":99
 *         raise RuntimeError("Do not construct directly")
 *     def __getitem__(self, size_t i):
 *         if not 0 <= i < self.num_row:             # <<<<<<<<<<<<<<
 *             raise IndexError("Cells row index out of range")
 *         return Row(self.filePyobj, self.num_col, self.cell_ptr + self.num_col*i)
 */
  __pyx_t_1 = (0 <= __pyx_v_i);
  if (__pyx_t_1) {
    __pyx_t_1 = (__pyx_v_i < __pyx_v_self->num_row);
  }
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "mmstructlib/IO/cif_parser.pyx":100
 *     def __getitem__(self, size_t i):
 *         if not 0 <= i < self.num_row:
 *             raise IndexError("Cells row index out of range")             # <<<<<<<<<<<<<<
 *         return Row(self.filePyobj, self.num_col, self.cell_ptr + self.num_col*i)
 *     def __len__(self):
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 100, __pyx_L1_error)

    /* "mmstructlib/IO/cif_parser.pyx":99
 *         raise RuntimeError("Do not construct directly")
 *     def __getitem__(self, size_t i):
 *         if not 0 <= i < self.num_row:             # <<<<<<<<<<<<<<
 *             raise IndexError("Cells row index out of range")
 *         return Row(self.filePyobj, self.num_col, self.cell_ptr + self.num_col*i)
 */
  }

  /* "mmstructlib/IO/cif_parser.pyx":101
 *         if not 0 <= i < self.num_row:
 *             raise IndexError("Cells row index out of range")
 *         return Row(self.filePyobj, self.num_col, self.cell_ptr + self.num_col*i)             # <<<<<<<<<<<<<<
 *     def __len__(self):
 *         return self.num_row
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_v_self->filePyobj;
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_4 = __pyx_f_11mmstructlib_2IO_10cif_parser_Row(__pyx_t_3, __pyx_v_self->num_col, (__pyx_v_self->cell_ptr + (__pyx_v_self->num_col * __pyx_v_i))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "mmstructlib/IO/cif_parser.pyx":98
 *     def __init__(self):
 *         raise RuntimeError("Do not construct directly")
 *     def __getitem__(self, size_t i):             # <<<<<<<<<<<<<<
 *         if not 0 <= i < self.num_row:
 *             raise IndexError("Cells row index out of range")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._Cells.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmstructlib/IO/cif_parser.pyx":102
 *             raise IndexError("Cells row index out of range")
 *         return Row(self.filePyobj, self.num_col, self.cell_ptr + self.num_col*i)
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.num_row
 *     def __iter__(self):
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_11mmstructlib_2IO_10cif_parser_6_Cells_5__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_11mmstructlib_2IO_10cif_parser_6_Cells_5__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_6_Cells_4__len__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Cells *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_11mmstructlib_2IO_10cif_parser_6_Cells_4__len__(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Cells *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "mmstructlib/IO/cif_parser.pyx":103
 *         return Row(self.filePyobj, self.num_col, self.cell_ptr + self.num_col*i)
 *     def __len__(self):
 *         return self.num_row             # <<<<<<<<<<<<<<
 *     def __iter__(self):
 *         return CellsIterator(self.filePyobj, self.num_col, self.cell_ptr, self.cell_ptr+self.num_row*self.num_col)
 */
  __pyx_r = __pyx_v_self->num_row;
  goto __pyx_L0;

  /* "mmstructlib/IO/cif_parser.pyx":102
 *             raise IndexError("Cells row index out of range")
 *         return Row(self.filePyobj, self.num_col, self.cell_ptr + self.num_col*i)
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.num_row
 *     def __iter__(self):
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmstructlib/IO/cif_parser.pyx":104
 *     def __len__(self):
 *         return self.num_row
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return CellsIterator(self.filePyobj, self.num_col, self.cell_ptr, self.cell_ptr+self.num_row*self.num_col)
 * cdef Cells(object filePyobj, size_t num_row, size_t num_col, OptStrPtr cell_ptr):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_6_Cells_7__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_6_Cells_7__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_6_Cells_6__iter__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Cells *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_6_Cells_6__iter__(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Cells *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "mmstructlib/IO/cif_parser.pyx":105
 *         return self.num_row
 *     def __iter__(self):
 *         return CellsIterator(self.filePyobj, self.num_col, self.cell_ptr, self.cell_ptr+self.num_row*self.num_col)             # <<<<<<<<<<<<<<
 * cdef Cells(object filePyobj, size_t num_row, size_t num_col, OptStrPtr cell_ptr):
 *     cdef _Cells obj = _Cells.__new__(_Cells)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_self->filePyobj;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_11mmstructlib_2IO_10cif_parser_CellsIterator(__pyx_t_1, __pyx_v_self->num_col, __pyx_v_self->cell_ptr, (__pyx_v_self->cell_ptr + (__pyx_v_self->num_row * __pyx_v_self->num_col))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "mmstructlib/IO/cif_parser.pyx":104
 *     def __len__(self):
 *         return self.num_row
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return CellsIterator(self.filePyobj, self.num_col, self.cell_ptr, self.cell_ptr+self.num_row*self.num_col)
 * cdef Cells(object filePyobj, size_t num_row, size_t num_col, OptStrPtr cell_ptr):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._Cells.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cell_ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_6_Cells_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_6_Cells_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_6_Cells_8__reduce_cython__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Cells *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_6_Cells_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Cells *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.cell_ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cell_ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cell_ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._Cells.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.cell_ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cell_ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_6_Cells_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_6_Cells_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_6_Cells_10__setstate_cython__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Cells *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_6_Cells_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Cells *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.cell_ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cell_ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.cell_ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.cell_ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._Cells.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmstructlib/IO/cif_parser.pyx":106
 *     def __iter__(self):
 *         return CellsIterator(self.filePyobj, self.num_col, self.cell_ptr, self.cell_ptr+self.num_row*self.num_col)
 * cdef Cells(object filePyobj, size_t num_row, size_t num_col, OptStrPtr cell_ptr):             # <<<<<<<<<<<<<<
 *     cdef _Cells obj = _Cells.__new__(_Cells)
 *     obj.filePyobj = filePyobj
 */

static PyObject *__pyx_f_11mmstructlib_2IO_10cif_parser_Cells(PyObject *__pyx_v_filePyobj, size_t __pyx_v_num_row, size_t __pyx_v_num_col, __pyx_t_11mmstructlib_2IO_10cif_parser_OptStrPtr __pyx_v_cell_ptr) {
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Cells *__pyx_v_obj = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("Cells", 0);

  /* "mmstructlib/IO/cif_parser.pyx":107
 *         return CellsIterator(self.filePyobj, self.num_col, self.cell_ptr, self.cell_ptr+self.num_row*self.num_col)
 * cdef Cells(object filePyobj, size_t num_row, size_t num_col, OptStrPtr cell_ptr):
 *     cdef _Cells obj = _Cells.__new__(_Cells)             # <<<<<<<<<<<<<<
 *     obj.filePyobj = filePyobj
 *     obj.cell_ptr = cell_ptr
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_11mmstructlib_2IO_10cif_parser__Cells(((PyTypeObject *)__pyx_ptype_11mmstructlib_2IO_10cif_parser__Cells), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_obj = ((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Cells *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mmstructlib/IO/cif_parser.pyx":108
 * cdef Cells(object filePyobj, size_t num_row, size_t num_col, OptStrPtr cell_ptr):
 *     cdef _Cells obj = _Cells.__new__(_Cells)
 *     obj.filePyobj = filePyobj             # <<<<<<<<<<<<<<
 *     obj.cell_ptr = cell_ptr
 *     obj.num_row = num_row
 */
  __Pyx_INCREF(__pyx_v_filePyobj);
  __Pyx_GIVEREF(__pyx_v_filePyobj);
  __Pyx_GOTREF(__pyx_v_obj->filePyobj);
  __Pyx_DECREF(__pyx_v_obj->filePyobj);
  __pyx_v_obj->filePyobj = __pyx_v_filePyobj;

  /* "mmstructlib/IO/cif_parser.pyx":109
 *     cdef _Cells obj = _Cells.__new__(_Cells)
 *     obj.filePyobj = filePyobj
 *     obj.cell_ptr = cell_ptr             # <<<<<<<<<<<<<<
 *     obj.num_row = num_row
 *     obj.num_col = num_col
 */
  __pyx_v_obj->cell_ptr = __pyx_v_cell_ptr;

  /* "mmstructlib/IO/cif_parser.pyx":110
 *     obj.filePyobj = filePyobj
 *     obj.cell_ptr = cell_ptr
 *     obj.num_row = num_row             # <<<<<<<<<<<<<<
 *     obj.num_col = num_col
 *     return obj
 */
  __pyx_v_obj->num_row = __pyx_v_num_row;

  /* "mmstructlib/IO/cif_parser.pyx":111
 *     obj.cell_ptr = cell_ptr
 *     obj.num_row = num_row
 *     obj.num_col = num_col             # <<<<<<<<<<<<<<
 *     return obj
 * 
 */
  __pyx_v_obj->num_col = __pyx_v_num_col;

  /* "mmstructlib/IO/cif_parser.pyx":112
 *     obj.num_row = num_row
 *     obj.num_col = num_col
 *     return obj             # <<<<<<<<<<<<<<
 * 
 * cdef class _Table:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_obj));
  __pyx_r = ((PyObject *)__pyx_v_obj);
  goto __pyx_L0;

  /* "mmstructlib/IO/cif_parser.pyx":106
 *     def __iter__(self):
 *         return CellsIterator(self.filePyobj, self.num_col, self.cell_ptr, self.cell_ptr+self.num_row*self.num_col)
 * cdef Cells(object filePyobj, size_t num_row, size_t num_col, OptStrPtr cell_ptr):             # <<<<<<<<<<<<<<
 *     cdef _Cells obj = _Cells.__new__(_Cells)
 *     obj.filePyobj = filePyobj
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser.Cells", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmstructlib/IO/cif_parser.pyx":121
 *     cdef size_t num_col
 *     cdef size_t num_row
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise RuntimeError("Do not construct directly")
 *     def index(self, object name):
 */

/* Python wrapper */
static int __pyx_pw_11mmstructlib_2IO_10cif_parser_6_Table_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_11mmstructlib_2IO_10cif_parser_6_Table_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_6_Table___init__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Table *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11mmstructlib_2IO_10cif_parser_6_Table___init__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Table *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "mmstructlib/IO/cif_parser.pyx":122
 *     cdef size_t num_row
 *     def __init__(self):
 *         raise RuntimeError("Do not construct directly")             # <<<<<<<<<<<<<<
 *     def index(self, object name):
 *         return self.column_index[name.encode('UTF-8')]
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 122, __pyx_L1_error)

  /* "mmstructlib/IO/cif_parser.pyx":121
 *     cdef size_t num_col
 *     cdef size_t num_row
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise RuntimeError("Do not construct directly")
 *     def index(self, object name):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._Table.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmstructlib/IO/cif_parser.pyx":123
 *     def __init__(self):
 *         raise RuntimeError("Do not construct directly")
 *     def index(self, object name):             # <<<<<<<<<<<<<<
 *         return self.column_index[name.encode('UTF-8')]
 *     def field(self, object name, size_t row = 0):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_6_Table_3index(PyObject *__pyx_v_self, PyObject *__pyx_v_name); /*proto*/
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_6_Table_3index(PyObject *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("index (wrapper)", 0);
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_6_Table_2index(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Table *)__pyx_v_self), ((PyObject *)__pyx_v_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_6_Table_2index(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Table *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  __Pyx_RefNannySetupContext("index", 0);

  /* "mmstructlib/IO/cif_parser.pyx":124
 *         raise RuntimeError("Do not construct directly")
 *     def index(self, object name):
 *         return self.column_index[name.encode('UTF-8')]             # <<<<<<<<<<<<<<
 *     def field(self, object name, size_t row = 0):
 *         return processOptional(
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_s_UTF_8);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_FromSize_t((__pyx_v_self->column_index[__pyx_t_4])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "mmstructlib/IO/cif_parser.pyx":123
 *     def __init__(self):
 *         raise RuntimeError("Do not construct directly")
 *     def index(self, object name):             # <<<<<<<<<<<<<<
 *         return self.column_index[name.encode('UTF-8')]
 *     def field(self, object name, size_t row = 0):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._Table.index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmstructlib/IO/cif_parser.pyx":125
 *     def index(self, object name):
 *         return self.column_index[name.encode('UTF-8')]
 *     def field(self, object name, size_t row = 0):             # <<<<<<<<<<<<<<
 *         return processOptional(
 *             self.thisptr.cells[
 */

/* Python wrapper */
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_6_Table_5field(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_6_Table_5field(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  size_t __pyx_v_row;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("field (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_row,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_row);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "field") < 0)) __PYX_ERR(0, 125, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_name = values[0];
    if (values[1]) {
      __pyx_v_row = __Pyx_PyInt_As_size_t(values[1]); if (unlikely((__pyx_v_row == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 125, __pyx_L3_error)
    } else {
      __pyx_v_row = ((size_t)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("field", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 125, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._Table.field", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_6_Table_4field(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Table *)__pyx_v_self), __pyx_v_name, __pyx_v_row);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_6_Table_4field(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Table *__pyx_v_self, PyObject *__pyx_v_name, size_t __pyx_v_row) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  __Pyx_RefNannySetupContext("field", 0);

  /* "mmstructlib/IO/cif_parser.pyx":126
 *         return self.column_index[name.encode('UTF-8')]
 *     def field(self, object name, size_t row = 0):
 *         return processOptional(             # <<<<<<<<<<<<<<
 *             self.thisptr.cells[
 *                 row * self.num_col + self.column_index[name.encode('UTF-8')]
 */
  __Pyx_XDECREF(__pyx_r);

  /* "mmstructlib/IO/cif_parser.pyx":128
 *         return processOptional(
 *             self.thisptr.cells[
 *                 row * self.num_col + self.column_index[name.encode('UTF-8')]             # <<<<<<<<<<<<<<
 *             ]
 *         )
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_s_UTF_8);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmstructlib/IO/cif_parser.pyx":126
 *         return self.column_index[name.encode('UTF-8')]
 *     def field(self, object name, size_t row = 0):
 *         return processOptional(             # <<<<<<<<<<<<<<
 *             self.thisptr.cells[
 *                 row * self.num_col + self.column_index[name.encode('UTF-8')]
 */
  __pyx_t_1 = __pyx_f_11mmstructlib_2IO_10cif_parser_processOptional((__pyx_v_self->thisptr->cells[((__pyx_v_row * __pyx_v_self->num_col) + (__pyx_v_self->column_index[__pyx_t_4]))])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "mmstructlib/IO/cif_parser.pyx":125
 *     def index(self, object name):
 *         return self.column_index[name.encode('UTF-8')]
 *     def field(self, object name, size_t row = 0):             # <<<<<<<<<<<<<<
 *         return processOptional(
 *             self.thisptr.cells[
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._Table.field", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmstructlib/IO/cif_parser.pyx":132
 *         )
 *     property name:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.name.decode('UTF-8')
 *     property cell_names:
 */

/* Python wrapper */
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_6_Table_4name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_6_Table_4name_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_6_Table_4name___get__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Table *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_6_Table_4name___get__(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Table *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "mmstructlib/IO/cif_parser.pyx":133
 *     property name:
 *         def __get__(self):
 *             return self.thisptr.name.decode('UTF-8')             # <<<<<<<<<<<<<<
 *     property cell_names:
 *         def __get__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_decode_cpp_string(__pyx_v_self->thisptr->name, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "mmstructlib/IO/cif_parser.pyx":132
 *         )
 *     property name:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.name.decode('UTF-8')
 *     property cell_names:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._Table.name.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmstructlib/IO/cif_parser.pyx":135
 *             return self.thisptr.name.decode('UTF-8')
 *     property cell_names:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return list(map(lambda x: x.decode('UTF-8'), list(self.thisptr.cellNames)))
 *     property cells:
 */

/* Python wrapper */
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_6_Table_10cell_names_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_6_Table_10cell_names_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_6_Table_10cell_names___get__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Table *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmstructlib/IO/cif_parser.pyx":136
 *     property cell_names:
 *         def __get__(self):
 *             return list(map(lambda x: x.decode('UTF-8'), list(self.thisptr.cellNames)))             # <<<<<<<<<<<<<<
 *     property cells:
 *         def __get__(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_6_Table_10cell_names_7__get___lambda(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_11mmstructlib_2IO_10cif_parser_6_Table_10cell_names_7__get___lambda = {"lambda", (PyCFunction)__pyx_pw_11mmstructlib_2IO_10cif_parser_6_Table_10cell_names_7__get___lambda, METH_O, 0};
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_6_Table_10cell_names_7__get___lambda(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda(__pyx_self, ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("lambda", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_x, __pyx_n_s_decode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_s_UTF_8);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._Table.cell_names.__get__.lambda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmstructlib/IO/cif_parser.pyx":135
 *             return self.thisptr.name.decode('UTF-8')
 *     property cell_names:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return list(map(lambda x: x.decode('UTF-8'), list(self.thisptr.cellNames)))
 *     property cells:
 */

static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_6_Table_10cell_names___get__(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Table *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "mmstructlib/IO/cif_parser.pyx":136
 *     property cell_names:
 *         def __get__(self):
 *             return list(map(lambda x: x.decode('UTF-8'), list(self.thisptr.cellNames)))             # <<<<<<<<<<<<<<
 *     property cells:
 *         def __get__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11mmstructlib_2IO_10cif_parser_6_Table_10cell_names_7__get___lambda, 0, __pyx_n_s_Table___get___locals_lambda, NULL, __pyx_n_s_mmstructlib_IO_cif_parser, __pyx_d, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_self->thisptr->cellNames); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PySequence_List(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_map, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PySequence_List(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "mmstructlib/IO/cif_parser.pyx":135
 *             return self.thisptr.name.decode('UTF-8')
 *     property cell_names:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return list(map(lambda x: x.decode('UTF-8'), list(self.thisptr.cellNames)))
 *     property cells:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._Table.cell_names.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmstructlib/IO/cif_parser.pyx":138
 *             return list(map(lambda x: x.decode('UTF-8'), list(self.thisptr.cellNames)))
 *     property cells:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return Cells(self.filePyobj, self.num_row, self.num_col, &(self.thisptr.cells[0]))
 * cdef object Table(object filePyobj, table[string]* tablePtr):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_6_Table_5cells_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_6_Table_5cells_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_6_Table_5cells___get__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Table *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_6_Table_5cells___get__(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Table *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "mmstructlib/IO/cif_parser.pyx":139
 *     property cells:
 *         def __get__(self):
 *             return Cells(self.filePyobj, self.num_row, self.num_col, &(self.thisptr.cells[0]))             # <<<<<<<<<<<<<<
 * cdef object Table(object filePyobj, table[string]* tablePtr):
 *     cdef size_t i
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_self->filePyobj;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_11mmstructlib_2IO_10cif_parser_Cells(__pyx_t_1, __pyx_v_self->num_row, __pyx_v_self->num_col, (&(__pyx_v_self->thisptr->cells[0]))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "mmstructlib/IO/cif_parser.pyx":138
 *             return list(map(lambda x: x.decode('UTF-8'), list(self.thisptr.cellNames)))
 *     property cells:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return Cells(self.filePyobj, self.num_row, self.num_col, &(self.thisptr.cells[0]))
 * cdef object Table(object filePyobj, table[string]* tablePtr):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._Table.cells.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_6_Table_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_6_Table_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_6_Table_6__reduce_cython__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Table *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_6_Table_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Table *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._Table.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_6_Table_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_6_Table_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_6_Table_8__setstate_cython__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Table *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_6_Table_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Table *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._Table.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmstructlib/IO/cif_parser.pyx":140
 *         def __get__(self):
 *             return Cells(self.filePyobj, self.num_row, self.num_col, &(self.thisptr.cells[0]))
 * cdef object Table(object filePyobj, table[string]* tablePtr):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef size_t size
 */

static PyObject *__pyx_f_11mmstructlib_2IO_10cif_parser_Table(PyObject *__pyx_v_filePyobj, cif::table<std::string>  *__pyx_v_tablePtr) {
  size_t __pyx_v_i;
  size_t __pyx_v_size;
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Table *__pyx_v_obj = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("Table", 0);

  /* "mmstructlib/IO/cif_parser.pyx":143
 *     cdef size_t i
 *     cdef size_t size
 *     cdef _Table obj = _Table.__new__(_Table)             # <<<<<<<<<<<<<<
 *     obj.filePyobj = filePyobj
 *     obj.thisptr = tablePtr
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_11mmstructlib_2IO_10cif_parser__Table(((PyTypeObject *)__pyx_ptype_11mmstructlib_2IO_10cif_parser__Table), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_obj = ((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Table *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mmstructlib/IO/cif_parser.pyx":144
 *     cdef size_t size
 *     cdef _Table obj = _Table.__new__(_Table)
 *     obj.filePyobj = filePyobj             # <<<<<<<<<<<<<<
 *     obj.thisptr = tablePtr
 *     obj.num_col = tablePtr.cellNames.size()
 */
  __Pyx_INCREF(__pyx_v_filePyobj);
  __Pyx_GIVEREF(__pyx_v_filePyobj);
  __Pyx_GOTREF(__pyx_v_obj->filePyobj);
  __Pyx_DECREF(__pyx_v_obj->filePyobj);
  __pyx_v_obj->filePyobj = __pyx_v_filePyobj;

  /* "mmstructlib/IO/cif_parser.pyx":145
 *     cdef _Table obj = _Table.__new__(_Table)
 *     obj.filePyobj = filePyobj
 *     obj.thisptr = tablePtr             # <<<<<<<<<<<<<<
 *     obj.num_col = tablePtr.cellNames.size()
 *  #   obj.column_index = dict()
 */
  __pyx_v_obj->thisptr = __pyx_v_tablePtr;

  /* "mmstructlib/IO/cif_parser.pyx":146
 *     obj.filePyobj = filePyobj
 *     obj.thisptr = tablePtr
 *     obj.num_col = tablePtr.cellNames.size()             # <<<<<<<<<<<<<<
 *  #   obj.column_index = dict()
 *     for i in range(obj.num_col):
 */
  __pyx_v_obj->num_col = __pyx_v_tablePtr->cellNames.size();

  /* "mmstructlib/IO/cif_parser.pyx":148
 *     obj.num_col = tablePtr.cellNames.size()
 *  #   obj.column_index = dict()
 *     for i in range(obj.num_col):             # <<<<<<<<<<<<<<
 *         obj.column_index[tablePtr.cellNames[i]] = i
 *     size = tablePtr.cells.size()
 */
  __pyx_t_2 = __pyx_v_obj->num_col;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "mmstructlib/IO/cif_parser.pyx":149
 *  #   obj.column_index = dict()
 *     for i in range(obj.num_col):
 *         obj.column_index[tablePtr.cellNames[i]] = i             # <<<<<<<<<<<<<<
 *     size = tablePtr.cells.size()
 *     obj.num_row = size / obj.num_col
 */
    (__pyx_v_obj->column_index[(__pyx_v_tablePtr->cellNames[__pyx_v_i])]) = __pyx_v_i;
  }

  /* "mmstructlib/IO/cif_parser.pyx":150
 *     for i in range(obj.num_col):
 *         obj.column_index[tablePtr.cellNames[i]] = i
 *     size = tablePtr.cells.size()             # <<<<<<<<<<<<<<
 *     obj.num_row = size / obj.num_col
 *     if size != obj.num_row * obj.num_col:
 */
  __pyx_v_size = __pyx_v_tablePtr->cells.size();

  /* "mmstructlib/IO/cif_parser.pyx":151
 *         obj.column_index[tablePtr.cellNames[i]] = i
 *     size = tablePtr.cells.size()
 *     obj.num_row = size / obj.num_col             # <<<<<<<<<<<<<<
 *     if size != obj.num_row * obj.num_col:
 *         raise RuntimeError("Table data size not a multiple of columns")
 */
  if (unlikely(__pyx_v_obj->num_col == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    __PYX_ERR(0, 151, __pyx_L1_error)
  }
  __pyx_v_obj->num_row = (__pyx_v_size / __pyx_v_obj->num_col);

  /* "mmstructlib/IO/cif_parser.pyx":152
 *     size = tablePtr.cells.size()
 *     obj.num_row = size / obj.num_col
 *     if size != obj.num_row * obj.num_col:             # <<<<<<<<<<<<<<
 *         raise RuntimeError("Table data size not a multiple of columns")
 *     return obj
 */
  __pyx_t_5 = ((__pyx_v_size != (__pyx_v_obj->num_row * __pyx_v_obj->num_col)) != 0);
  if (unlikely(__pyx_t_5)) {

    /* "mmstructlib/IO/cif_parser.pyx":153
 *     obj.num_row = size / obj.num_col
 *     if size != obj.num_row * obj.num_col:
 *         raise RuntimeError("Table data size not a multiple of columns")             # <<<<<<<<<<<<<<
 *     return obj
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 153, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 153, __pyx_L1_error)

    /* "mmstructlib/IO/cif_parser.pyx":152
 *     size = tablePtr.cells.size()
 *     obj.num_row = size / obj.num_col
 *     if size != obj.num_row * obj.num_col:             # <<<<<<<<<<<<<<
 *         raise RuntimeError("Table data size not a multiple of columns")
 *     return obj
 */
  }

  /* "mmstructlib/IO/cif_parser.pyx":154
 *     if size != obj.num_row * obj.num_col:
 *         raise RuntimeError("Table data size not a multiple of columns")
 *     return obj             # <<<<<<<<<<<<<<
 * 
 * cdef class _TableVector:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_obj));
  __pyx_r = ((PyObject *)__pyx_v_obj);
  goto __pyx_L0;

  /* "mmstructlib/IO/cif_parser.pyx":140
 *         def __get__(self):
 *             return Cells(self.filePyobj, self.num_row, self.num_col, &(self.thisptr.cells[0]))
 * cdef object Table(object filePyobj, table[string]* tablePtr):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef size_t size
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser.Table", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmstructlib/IO/cif_parser.pyx":160
 *     cdef vector[table[string]]* thisptr
 *     cdef cppmap[string, size_t] table_index
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise RuntimeError("Do not construct directly")
 *     def __getitem__(self, object table_id):
 */

/* Python wrapper */
static int __pyx_pw_11mmstructlib_2IO_10cif_parser_12_TableVector_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_11mmstructlib_2IO_10cif_parser_12_TableVector_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_12_TableVector___init__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__TableVector *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11mmstructlib_2IO_10cif_parser_12_TableVector___init__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__TableVector *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "mmstructlib/IO/cif_parser.pyx":161
 *     cdef cppmap[string, size_t] table_index
 *     def __init__(self):
 *         raise RuntimeError("Do not construct directly")             # <<<<<<<<<<<<<<
 *     def __getitem__(self, object table_id):
 *         if isinstance(table_id, str):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 161, __pyx_L1_error)

  /* "mmstructlib/IO/cif_parser.pyx":160
 *     cdef vector[table[string]]* thisptr
 *     cdef cppmap[string, size_t] table_index
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise RuntimeError("Do not construct directly")
 *     def __getitem__(self, object table_id):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._TableVector.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmstructlib/IO/cif_parser.pyx":162
 *     def __init__(self):
 *         raise RuntimeError("Do not construct directly")
 *     def __getitem__(self, object table_id):             # <<<<<<<<<<<<<<
 *         if isinstance(table_id, str):
 *             val = self.get(table_id)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_12_TableVector_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_table_id); /*proto*/
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_12_TableVector_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_table_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_12_TableVector_2__getitem__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__TableVector *)__pyx_v_self), ((PyObject *)__pyx_v_table_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_12_TableVector_2__getitem__(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__TableVector *__pyx_v_self, PyObject *__pyx_v_table_id) {
  PyObject *__pyx_v_val = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  std::vector<cif::table<std::string> > ::size_type __pyx_t_6;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "mmstructlib/IO/cif_parser.pyx":163
 *         raise RuntimeError("Do not construct directly")
 *     def __getitem__(self, object table_id):
 *         if isinstance(table_id, str):             # <<<<<<<<<<<<<<
 *             val = self.get(table_id)
 *             if val is None:
 */
  __pyx_t_1 = PyString_Check(__pyx_v_table_id); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "mmstructlib/IO/cif_parser.pyx":164
 *     def __getitem__(self, object table_id):
 *         if isinstance(table_id, str):
 *             val = self.get(table_id)             # <<<<<<<<<<<<<<
 *             if val is None:
 *                 raise IndexError("TableVector: name '{}' not found".format(table_id))
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_table_id) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_table_id);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_val = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "mmstructlib/IO/cif_parser.pyx":165
 *         if isinstance(table_id, str):
 *             val = self.get(table_id)
 *             if val is None:             # <<<<<<<<<<<<<<
 *                 raise IndexError("TableVector: name '{}' not found".format(table_id))
 *         elif isinstance(table_id, int):
 */
    __pyx_t_2 = (__pyx_v_val == Py_None);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (unlikely(__pyx_t_1)) {

      /* "mmstructlib/IO/cif_parser.pyx":166
 *             val = self.get(table_id)
 *             if val is None:
 *                 raise IndexError("TableVector: name '{}' not found".format(table_id))             # <<<<<<<<<<<<<<
 *         elif isinstance(table_id, int):
 *             if not 0 <= table_id < self.thisptr.size():
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_TableVector_name_not_found, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 166, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_table_id) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_table_id);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 166, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 166, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 166, __pyx_L1_error)

      /* "mmstructlib/IO/cif_parser.pyx":165
 *         if isinstance(table_id, str):
 *             val = self.get(table_id)
 *             if val is None:             # <<<<<<<<<<<<<<
 *                 raise IndexError("TableVector: name '{}' not found".format(table_id))
 *         elif isinstance(table_id, int):
 */
    }

    /* "mmstructlib/IO/cif_parser.pyx":163
 *         raise RuntimeError("Do not construct directly")
 *     def __getitem__(self, object table_id):
 *         if isinstance(table_id, str):             # <<<<<<<<<<<<<<
 *             val = self.get(table_id)
 *             if val is None:
 */
    goto __pyx_L3;
  }

  /* "mmstructlib/IO/cif_parser.pyx":167
 *             if val is None:
 *                 raise IndexError("TableVector: name '{}' not found".format(table_id))
 *         elif isinstance(table_id, int):             # <<<<<<<<<<<<<<
 *             if not 0 <= table_id < self.thisptr.size():
 *                 raise IndexError("TableVector row index out of range")
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_table_id); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (likely(__pyx_t_2)) {

    /* "mmstructlib/IO/cif_parser.pyx":168
 *                 raise IndexError("TableVector: name '{}' not found".format(table_id))
 *         elif isinstance(table_id, int):
 *             if not 0 <= table_id < self.thisptr.size():             # <<<<<<<<<<<<<<
 *                 raise IndexError("TableVector row index out of range")
 *             val = Table(self.filePyobj, &(deref(self.thisptr)[table_id]))
 */
    __pyx_t_4 = PyObject_RichCompare(__pyx_int_0, __pyx_v_table_id, Py_LE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 168, __pyx_L1_error)
    if (__Pyx_PyObject_IsTrue(__pyx_t_4)) {
      __Pyx_DECREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_self->thisptr->size()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 168, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_table_id, __pyx_t_3, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 168, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 168, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = ((!__pyx_t_2) != 0);
    if (unlikely(__pyx_t_1)) {

      /* "mmstructlib/IO/cif_parser.pyx":169
 *         elif isinstance(table_id, int):
 *             if not 0 <= table_id < self.thisptr.size():
 *                 raise IndexError("TableVector row index out of range")             # <<<<<<<<<<<<<<
 *             val = Table(self.filePyobj, &(deref(self.thisptr)[table_id]))
 *         else:
 */
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 169, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 169, __pyx_L1_error)

      /* "mmstructlib/IO/cif_parser.pyx":168
 *                 raise IndexError("TableVector: name '{}' not found".format(table_id))
 *         elif isinstance(table_id, int):
 *             if not 0 <= table_id < self.thisptr.size():             # <<<<<<<<<<<<<<
 *                 raise IndexError("TableVector row index out of range")
 *             val = Table(self.filePyobj, &(deref(self.thisptr)[table_id]))
 */
    }

    /* "mmstructlib/IO/cif_parser.pyx":170
 *             if not 0 <= table_id < self.thisptr.size():
 *                 raise IndexError("TableVector row index out of range")
 *             val = Table(self.filePyobj, &(deref(self.thisptr)[table_id]))             # <<<<<<<<<<<<<<
 *         else:
 *             raise IndexError("TableVector getitem takes int or str")
 */
    __pyx_t_4 = __pyx_v_self->filePyobj;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyInt_As_size_t(__pyx_v_table_id); if (unlikely((__pyx_t_6 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 170, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_11mmstructlib_2IO_10cif_parser_Table(__pyx_t_4, (&((*__pyx_v_self->thisptr)[__pyx_t_6]))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 170, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_val = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "mmstructlib/IO/cif_parser.pyx":167
 *             if val is None:
 *                 raise IndexError("TableVector: name '{}' not found".format(table_id))
 *         elif isinstance(table_id, int):             # <<<<<<<<<<<<<<
 *             if not 0 <= table_id < self.thisptr.size():
 *                 raise IndexError("TableVector row index out of range")
 */
    goto __pyx_L3;
  }

  /* "mmstructlib/IO/cif_parser.pyx":172
 *             val = Table(self.filePyobj, &(deref(self.thisptr)[table_id]))
 *         else:
 *             raise IndexError("TableVector getitem takes int or str")             # <<<<<<<<<<<<<<
 *         return val
 *     def get(self, object key_str, object default = None):
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 172, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "mmstructlib/IO/cif_parser.pyx":173
 *         else:
 *             raise IndexError("TableVector getitem takes int or str")
 *         return val             # <<<<<<<<<<<<<<
 *     def get(self, object key_str, object default = None):
 *         cdef string key = key_str.encode('UTF-8')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_val);
  __pyx_r = __pyx_v_val;
  goto __pyx_L0;

  /* "mmstructlib/IO/cif_parser.pyx":162
 *     def __init__(self):
 *         raise RuntimeError("Do not construct directly")
 *     def __getitem__(self, object table_id):             # <<<<<<<<<<<<<<
 *         if isinstance(table_id, str):
 *             val = self.get(table_id)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._TableVector.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_val);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmstructlib/IO/cif_parser.pyx":174
 *             raise IndexError("TableVector getitem takes int or str")
 *         return val
 *     def get(self, object key_str, object default = None):             # <<<<<<<<<<<<<<
 *         cdef string key = key_str.encode('UTF-8')
 *         cdef cppmap[string, size_t].iterator res = self.table_index.find(key)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_12_TableVector_5get(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_12_TableVector_5get(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_key_str = 0;
  PyObject *__pyx_v_default = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key_str,&__pyx_n_s_default,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_key_str)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_default);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get") < 0)) __PYX_ERR(0, 174, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_key_str = values[0];
    __pyx_v_default = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 174, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._TableVector.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_12_TableVector_4get(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__TableVector *)__pyx_v_self), __pyx_v_key_str, __pyx_v_default);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_12_TableVector_4get(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__TableVector *__pyx_v_self, PyObject *__pyx_v_key_str, PyObject *__pyx_v_default) {
  std::string __pyx_v_key;
  std::map<std::string,size_t> ::iterator __pyx_v_res;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("get", 0);

  /* "mmstructlib/IO/cif_parser.pyx":175
 *         return val
 *     def get(self, object key_str, object default = None):
 *         cdef string key = key_str.encode('UTF-8')             # <<<<<<<<<<<<<<
 *         cdef cppmap[string, size_t].iterator res = self.table_index.find(key)
 *         if res == self.table_index.end():
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_key_str, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_s_UTF_8);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_key = __pyx_t_4;

  /* "mmstructlib/IO/cif_parser.pyx":176
 *     def get(self, object key_str, object default = None):
 *         cdef string key = key_str.encode('UTF-8')
 *         cdef cppmap[string, size_t].iterator res = self.table_index.find(key)             # <<<<<<<<<<<<<<
 *         if res == self.table_index.end():
 *             return default
 */
  __pyx_v_res = __pyx_v_self->table_index.find(__pyx_v_key);

  /* "mmstructlib/IO/cif_parser.pyx":177
 *         cdef string key = key_str.encode('UTF-8')
 *         cdef cppmap[string, size_t].iterator res = self.table_index.find(key)
 *         if res == self.table_index.end():             # <<<<<<<<<<<<<<
 *             return default
 *         return Table(self.filePyobj, &(deref(self.thisptr)[deref(res).second]))
 */
  __pyx_t_5 = ((__pyx_v_res == __pyx_v_self->table_index.end()) != 0);
  if (__pyx_t_5) {

    /* "mmstructlib/IO/cif_parser.pyx":178
 *         cdef cppmap[string, size_t].iterator res = self.table_index.find(key)
 *         if res == self.table_index.end():
 *             return default             # <<<<<<<<<<<<<<
 *         return Table(self.filePyobj, &(deref(self.thisptr)[deref(res).second]))
 *     def __contains__(self, object key_str):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_default);
    __pyx_r = __pyx_v_default;
    goto __pyx_L0;

    /* "mmstructlib/IO/cif_parser.pyx":177
 *         cdef string key = key_str.encode('UTF-8')
 *         cdef cppmap[string, size_t].iterator res = self.table_index.find(key)
 *         if res == self.table_index.end():             # <<<<<<<<<<<<<<
 *             return default
 *         return Table(self.filePyobj, &(deref(self.thisptr)[deref(res).second]))
 */
  }

  /* "mmstructlib/IO/cif_parser.pyx":179
 *         if res == self.table_index.end():
 *             return default
 *         return Table(self.filePyobj, &(deref(self.thisptr)[deref(res).second]))             # <<<<<<<<<<<<<<
 *     def __contains__(self, object key_str):
 *         cdef string key = key_str.encode('UTF-8')
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_self->filePyobj;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_11mmstructlib_2IO_10cif_parser_Table(__pyx_t_1, (&((*__pyx_v_self->thisptr)[(*__pyx_v_res).second]))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "mmstructlib/IO/cif_parser.pyx":174
 *             raise IndexError("TableVector getitem takes int or str")
 *         return val
 *     def get(self, object key_str, object default = None):             # <<<<<<<<<<<<<<
 *         cdef string key = key_str.encode('UTF-8')
 *         cdef cppmap[string, size_t].iterator res = self.table_index.find(key)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._TableVector.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmstructlib/IO/cif_parser.pyx":180
 *             return default
 *         return Table(self.filePyobj, &(deref(self.thisptr)[deref(res).second]))
 *     def __contains__(self, object key_str):             # <<<<<<<<<<<<<<
 *         cdef string key = key_str.encode('UTF-8')
 *         cdef cppmap[string, size_t].iterator res = self.table_index.find(key)
 */

/* Python wrapper */
static int __pyx_pw_11mmstructlib_2IO_10cif_parser_12_TableVector_7__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_key_str); /*proto*/
static int __pyx_pw_11mmstructlib_2IO_10cif_parser_12_TableVector_7__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_key_str) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__contains__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_12_TableVector_6__contains__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__TableVector *)__pyx_v_self), ((PyObject *)__pyx_v_key_str));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11mmstructlib_2IO_10cif_parser_12_TableVector_6__contains__(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__TableVector *__pyx_v_self, PyObject *__pyx_v_key_str) {
  std::string __pyx_v_key;
  std::map<std::string,size_t> ::iterator __pyx_v_res;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  __Pyx_RefNannySetupContext("__contains__", 0);

  /* "mmstructlib/IO/cif_parser.pyx":181
 *         return Table(self.filePyobj, &(deref(self.thisptr)[deref(res).second]))
 *     def __contains__(self, object key_str):
 *         cdef string key = key_str.encode('UTF-8')             # <<<<<<<<<<<<<<
 *         cdef cppmap[string, size_t].iterator res = self.table_index.find(key)
 *         return  res != self.table_index.end()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_key_str, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_s_UTF_8);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 181, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_key = __pyx_t_4;

  /* "mmstructlib/IO/cif_parser.pyx":182
 *     def __contains__(self, object key_str):
 *         cdef string key = key_str.encode('UTF-8')
 *         cdef cppmap[string, size_t].iterator res = self.table_index.find(key)             # <<<<<<<<<<<<<<
 *         return  res != self.table_index.end()
 *     def __len__(self):
 */
  __pyx_v_res = __pyx_v_self->table_index.find(__pyx_v_key);

  /* "mmstructlib/IO/cif_parser.pyx":183
 *         cdef string key = key_str.encode('UTF-8')
 *         cdef cppmap[string, size_t].iterator res = self.table_index.find(key)
 *         return  res != self.table_index.end()             # <<<<<<<<<<<<<<
 *     def __len__(self):
 *         return self.thisptr.size()
 */
  __pyx_r = (__pyx_v_res != __pyx_v_self->table_index.end());
  goto __pyx_L0;

  /* "mmstructlib/IO/cif_parser.pyx":180
 *             return default
 *         return Table(self.filePyobj, &(deref(self.thisptr)[deref(res).second]))
 *     def __contains__(self, object key_str):             # <<<<<<<<<<<<<<
 *         cdef string key = key_str.encode('UTF-8')
 *         cdef cppmap[string, size_t].iterator res = self.table_index.find(key)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._TableVector.__contains__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmstructlib/IO/cif_parser.pyx":184
 *         cdef cppmap[string, size_t].iterator res = self.table_index.find(key)
 *         return  res != self.table_index.end()
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.size()
 * cdef object TableVector(object filePyobj, vector[table[string]]* ptr):
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_11mmstructlib_2IO_10cif_parser_12_TableVector_9__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_11mmstructlib_2IO_10cif_parser_12_TableVector_9__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_12_TableVector_8__len__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__TableVector *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_11mmstructlib_2IO_10cif_parser_12_TableVector_8__len__(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__TableVector *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "mmstructlib/IO/cif_parser.pyx":185
 *         return  res != self.table_index.end()
 *     def __len__(self):
 *         return self.thisptr.size()             # <<<<<<<<<<<<<<
 * cdef object TableVector(object filePyobj, vector[table[string]]* ptr):
 *     cdef size_t i
 */
  __pyx_r = __pyx_v_self->thisptr->size();
  goto __pyx_L0;

  /* "mmstructlib/IO/cif_parser.pyx":184
 *         cdef cppmap[string, size_t].iterator res = self.table_index.find(key)
 *         return  res != self.table_index.end()
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.size()
 * cdef object TableVector(object filePyobj, vector[table[string]]* ptr):
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_12_TableVector_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_12_TableVector_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_12_TableVector_10__reduce_cython__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__TableVector *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_12_TableVector_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__TableVector *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._TableVector.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_12_TableVector_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_12_TableVector_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_12_TableVector_12__setstate_cython__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__TableVector *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_12_TableVector_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__TableVector *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._TableVector.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmstructlib/IO/cif_parser.pyx":186
 *     def __len__(self):
 *         return self.thisptr.size()
 * cdef object TableVector(object filePyobj, vector[table[string]]* ptr):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef _TableVector obj = _TableVector.__new__(_TableVector)
 */

static PyObject *__pyx_f_11mmstructlib_2IO_10cif_parser_TableVector(PyObject *__pyx_v_filePyobj, std::vector<cif::table<std::string> >  *__pyx_v_ptr) {
  size_t __pyx_v_i;
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser__TableVector *__pyx_v_obj = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<cif::table<std::string> > ::size_type __pyx_t_2;
  std::vector<cif::table<std::string> > ::size_type __pyx_t_3;
  size_t __pyx_t_4;
  __Pyx_FakeReference<cif::table<std::string> > __pyx_t_5;
  __Pyx_RefNannySetupContext("TableVector", 0);

  /* "mmstructlib/IO/cif_parser.pyx":188
 * cdef object TableVector(object filePyobj, vector[table[string]]* ptr):
 *     cdef size_t i
 *     cdef _TableVector obj = _TableVector.__new__(_TableVector)             # <<<<<<<<<<<<<<
 *     obj.filePyobj = filePyobj
 *     obj.thisptr = ptr
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_11mmstructlib_2IO_10cif_parser__TableVector(((PyTypeObject *)__pyx_ptype_11mmstructlib_2IO_10cif_parser__TableVector), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_obj = ((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__TableVector *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mmstructlib/IO/cif_parser.pyx":189
 *     cdef size_t i
 *     cdef _TableVector obj = _TableVector.__new__(_TableVector)
 *     obj.filePyobj = filePyobj             # <<<<<<<<<<<<<<
 *     obj.thisptr = ptr
 *     for i in range(ptr.size()):
 */
  __Pyx_INCREF(__pyx_v_filePyobj);
  __Pyx_GIVEREF(__pyx_v_filePyobj);
  __Pyx_GOTREF(__pyx_v_obj->filePyobj);
  __Pyx_DECREF(__pyx_v_obj->filePyobj);
  __pyx_v_obj->filePyobj = __pyx_v_filePyobj;

  /* "mmstructlib/IO/cif_parser.pyx":190
 *     cdef _TableVector obj = _TableVector.__new__(_TableVector)
 *     obj.filePyobj = filePyobj
 *     obj.thisptr = ptr             # <<<<<<<<<<<<<<
 *     for i in range(ptr.size()):
 *         obj.table_index[ptr.at(i).name] = i
 */
  __pyx_v_obj->thisptr = __pyx_v_ptr;

  /* "mmstructlib/IO/cif_parser.pyx":191
 *     obj.filePyobj = filePyobj
 *     obj.thisptr = ptr
 *     for i in range(ptr.size()):             # <<<<<<<<<<<<<<
 *         obj.table_index[ptr.at(i).name] = i
 *     return obj
 */
  __pyx_t_2 = __pyx_v_ptr->size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "mmstructlib/IO/cif_parser.pyx":192
 *     obj.thisptr = ptr
 *     for i in range(ptr.size()):
 *         obj.table_index[ptr.at(i).name] = i             # <<<<<<<<<<<<<<
 *     return obj
 * 
 */
    try {
      __pyx_t_5 = __pyx_v_ptr->at(__pyx_v_i);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 192, __pyx_L1_error)
    }
    (__pyx_v_obj->table_index[__pyx_t_5->name]) = __pyx_v_i;
  }

  /* "mmstructlib/IO/cif_parser.pyx":193
 *     for i in range(ptr.size()):
 *         obj.table_index[ptr.at(i).name] = i
 *     return obj             # <<<<<<<<<<<<<<
 * 
 * cdef class _Save:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_obj));
  __pyx_r = ((PyObject *)__pyx_v_obj);
  goto __pyx_L0;

  /* "mmstructlib/IO/cif_parser.pyx":186
 *     def __len__(self):
 *         return self.thisptr.size()
 * cdef object TableVector(object filePyobj, vector[table[string]]* ptr):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef _TableVector obj = _TableVector.__new__(_TableVector)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser.TableVector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmstructlib/IO/cif_parser.pyx":198
 *     cdef object filePyobj #keep a pointer to file to keep it alive
 *     cdef save[string]* thisptr
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise RuntimeError("Do not construct directly")
 *     property tag:
 */

/* Python wrapper */
static int __pyx_pw_11mmstructlib_2IO_10cif_parser_5_Save_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_11mmstructlib_2IO_10cif_parser_5_Save_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_5_Save___init__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Save *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11mmstructlib_2IO_10cif_parser_5_Save___init__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Save *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "mmstructlib/IO/cif_parser.pyx":199
 *     cdef save[string]* thisptr
 *     def __init__(self):
 *         raise RuntimeError("Do not construct directly")             # <<<<<<<<<<<<<<
 *     property tag:
 *         def __get__(self):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 199, __pyx_L1_error)

  /* "mmstructlib/IO/cif_parser.pyx":198
 *     cdef object filePyobj #keep a pointer to file to keep it alive
 *     cdef save[string]* thisptr
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise RuntimeError("Do not construct directly")
 *     property tag:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._Save.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmstructlib/IO/cif_parser.pyx":201
 *         raise RuntimeError("Do not construct directly")
 *     property tag:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.tag.decode('UTF-8')
 *     property field:
 */

/* Python wrapper */
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_5_Save_3tag_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_5_Save_3tag_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_5_Save_3tag___get__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Save *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_5_Save_3tag___get__(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Save *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "mmstructlib/IO/cif_parser.pyx":202
 *     property tag:
 *         def __get__(self):
 *             return self.thisptr.tag.decode('UTF-8')             # <<<<<<<<<<<<<<
 *     property field:
 *         def __get__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_decode_cpp_string(__pyx_v_self->thisptr->tag, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "mmstructlib/IO/cif_parser.pyx":201
 *         raise RuntimeError("Do not construct directly")
 *     property tag:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.tag.decode('UTF-8')
 *     property field:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._Save.tag.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmstructlib/IO/cif_parser.pyx":204
 *             return self.thisptr.tag.decode('UTF-8')
 *     property field:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return processOptional(self.thisptr.field)
 *     property tables:
 */

/* Python wrapper */
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_5_Save_5field_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_5_Save_5field_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_5_Save_5field___get__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Save *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_5_Save_5field___get__(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Save *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "mmstructlib/IO/cif_parser.pyx":205
 *     property field:
 *         def __get__(self):
 *             return processOptional(self.thisptr.field)             # <<<<<<<<<<<<<<
 *     property tables:
 *         def __get__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_11mmstructlib_2IO_10cif_parser_processOptional(__pyx_v_self->thisptr->field); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "mmstructlib/IO/cif_parser.pyx":204
 *             return self.thisptr.tag.decode('UTF-8')
 *     property field:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return processOptional(self.thisptr.field)
 *     property tables:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._Save.field.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmstructlib/IO/cif_parser.pyx":207
 *             return processOptional(self.thisptr.field)
 *     property tables:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return TableVector(self.fileObj, &(self.thisptr.tables))
 * cdef object Save(object filePyobj, save[string]* savePtr):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_5_Save_6tables_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_5_Save_6tables_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_5_Save_6tables___get__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Save *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_5_Save_6tables___get__(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Save *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "mmstructlib/IO/cif_parser.pyx":208
 *     property tables:
 *         def __get__(self):
 *             return TableVector(self.fileObj, &(self.thisptr.tables))             # <<<<<<<<<<<<<<
 * cdef object Save(object filePyobj, save[string]* savePtr):
 *     cdef _Save obj = _Save.__new__(_Save)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_fileObj); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_11mmstructlib_2IO_10cif_parser_TableVector(__pyx_t_1, (&__pyx_v_self->thisptr->tables)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "mmstructlib/IO/cif_parser.pyx":207
 *             return processOptional(self.thisptr.field)
 *     property tables:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return TableVector(self.fileObj, &(self.thisptr.tables))
 * cdef object Save(object filePyobj, save[string]* savePtr):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._Save.tables.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_5_Save_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_5_Save_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_5_Save_2__reduce_cython__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Save *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_5_Save_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Save *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._Save.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_5_Save_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_5_Save_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_5_Save_4__setstate_cython__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Save *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_5_Save_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Save *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._Save.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmstructlib/IO/cif_parser.pyx":209
 *         def __get__(self):
 *             return TableVector(self.fileObj, &(self.thisptr.tables))
 * cdef object Save(object filePyobj, save[string]* savePtr):             # <<<<<<<<<<<<<<
 *     cdef _Save obj = _Save.__new__(_Save)
 *     obj.filePyobj = filePyobj
 */

static PyObject *__pyx_f_11mmstructlib_2IO_10cif_parser_Save(PyObject *__pyx_v_filePyobj, cif::save<std::string>  *__pyx_v_savePtr) {
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Save *__pyx_v_obj = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("Save", 0);

  /* "mmstructlib/IO/cif_parser.pyx":210
 *             return TableVector(self.fileObj, &(self.thisptr.tables))
 * cdef object Save(object filePyobj, save[string]* savePtr):
 *     cdef _Save obj = _Save.__new__(_Save)             # <<<<<<<<<<<<<<
 *     obj.filePyobj = filePyobj
 *     obj.thisptr = savePtr
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_11mmstructlib_2IO_10cif_parser__Save(((PyTypeObject *)__pyx_ptype_11mmstructlib_2IO_10cif_parser__Save), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_obj = ((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Save *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mmstructlib/IO/cif_parser.pyx":211
 * cdef object Save(object filePyobj, save[string]* savePtr):
 *     cdef _Save obj = _Save.__new__(_Save)
 *     obj.filePyobj = filePyobj             # <<<<<<<<<<<<<<
 *     obj.thisptr = savePtr
 *     return obj
 */
  __Pyx_INCREF(__pyx_v_filePyobj);
  __Pyx_GIVEREF(__pyx_v_filePyobj);
  __Pyx_GOTREF(__pyx_v_obj->filePyobj);
  __Pyx_DECREF(__pyx_v_obj->filePyobj);
  __pyx_v_obj->filePyobj = __pyx_v_filePyobj;

  /* "mmstructlib/IO/cif_parser.pyx":212
 *     cdef _Save obj = _Save.__new__(_Save)
 *     obj.filePyobj = filePyobj
 *     obj.thisptr = savePtr             # <<<<<<<<<<<<<<
 *     return obj
 * 
 */
  __pyx_v_obj->thisptr = __pyx_v_savePtr;

  /* "mmstructlib/IO/cif_parser.pyx":213
 *     obj.filePyobj = filePyobj
 *     obj.thisptr = savePtr
 *     return obj             # <<<<<<<<<<<<<<
 * 
 * cdef class _SaveVector:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_obj));
  __pyx_r = ((PyObject *)__pyx_v_obj);
  goto __pyx_L0;

  /* "mmstructlib/IO/cif_parser.pyx":209
 *         def __get__(self):
 *             return TableVector(self.fileObj, &(self.thisptr.tables))
 * cdef object Save(object filePyobj, save[string]* savePtr):             # <<<<<<<<<<<<<<
 *     cdef _Save obj = _Save.__new__(_Save)
 *     obj.filePyobj = filePyobj
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser.Save", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmstructlib/IO/cif_parser.pyx":218
 *     cdef object filePyobj #keep a pointer to file to keep it alive
 *     cdef vector[save[string]]* thisptr
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise RuntimeError("Do not construct directly")
 *     def __getitem__(self, size_t i):
 */

/* Python wrapper */
static int __pyx_pw_11mmstructlib_2IO_10cif_parser_11_SaveVector_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_11mmstructlib_2IO_10cif_parser_11_SaveVector_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_11_SaveVector___init__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__SaveVector *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11mmstructlib_2IO_10cif_parser_11_SaveVector___init__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__SaveVector *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "mmstructlib/IO/cif_parser.pyx":219
 *     cdef vector[save[string]]* thisptr
 *     def __init__(self):
 *         raise RuntimeError("Do not construct directly")             # <<<<<<<<<<<<<<
 *     def __getitem__(self, size_t i):
 *         if not 0 <= i < self.thisptr.size():
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 219, __pyx_L1_error)

  /* "mmstructlib/IO/cif_parser.pyx":218
 *     cdef object filePyobj #keep a pointer to file to keep it alive
 *     cdef vector[save[string]]* thisptr
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise RuntimeError("Do not construct directly")
 *     def __getitem__(self, size_t i):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._SaveVector.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmstructlib/IO/cif_parser.pyx":220
 *     def __init__(self):
 *         raise RuntimeError("Do not construct directly")
 *     def __getitem__(self, size_t i):             # <<<<<<<<<<<<<<
 *         if not 0 <= i < self.thisptr.size():
 *             raise IndexError("SaveVector row index out of range")
 */

/* Python wrapper */
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_11_SaveVector_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_11_SaveVector_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_As_size_t(__pyx_arg_i); if (unlikely((__pyx_v_i == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 220, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._SaveVector.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_11_SaveVector_2__getitem__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__SaveVector *)__pyx_v_self), ((size_t)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_11_SaveVector_2__getitem__(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__SaveVector *__pyx_v_self, size_t __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "mmstructlib/IO/cif_parser.pyx":221
 *         raise RuntimeError("Do not construct directly")
 *     def __getitem__(self, size_t i):
 *         if not 0 <= i < self.thisptr.size():             # <<<<<<<<<<<<<<
 *             raise IndexError("SaveVector row index out of range")
 *         return Save(self.filePyobj, &(deref(self.thisptr)[i]))
 */
  __pyx_t_1 = (0 <= __pyx_v_i);
  if (__pyx_t_1) {
    __pyx_t_1 = (__pyx_v_i < __pyx_v_self->thisptr->size());
  }
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "mmstructlib/IO/cif_parser.pyx":222
 *     def __getitem__(self, size_t i):
 *         if not 0 <= i < self.thisptr.size():
 *             raise IndexError("SaveVector row index out of range")             # <<<<<<<<<<<<<<
 *         return Save(self.filePyobj, &(deref(self.thisptr)[i]))
 *     def __len__(self):
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 222, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 222, __pyx_L1_error)

    /* "mmstructlib/IO/cif_parser.pyx":221
 *         raise RuntimeError("Do not construct directly")
 *     def __getitem__(self, size_t i):
 *         if not 0 <= i < self.thisptr.size():             # <<<<<<<<<<<<<<
 *             raise IndexError("SaveVector row index out of range")
 *         return Save(self.filePyobj, &(deref(self.thisptr)[i]))
 */
  }

  /* "mmstructlib/IO/cif_parser.pyx":223
 *         if not 0 <= i < self.thisptr.size():
 *             raise IndexError("SaveVector row index out of range")
 *         return Save(self.filePyobj, &(deref(self.thisptr)[i]))             # <<<<<<<<<<<<<<
 *     def __len__(self):
 *         return self.thisptr.size()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_v_self->filePyobj;
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_4 = __pyx_f_11mmstructlib_2IO_10cif_parser_Save(__pyx_t_3, (&((*__pyx_v_self->thisptr)[__pyx_v_i]))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "mmstructlib/IO/cif_parser.pyx":220
 *     def __init__(self):
 *         raise RuntimeError("Do not construct directly")
 *     def __getitem__(self, size_t i):             # <<<<<<<<<<<<<<
 *         if not 0 <= i < self.thisptr.size():
 *             raise IndexError("SaveVector row index out of range")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._SaveVector.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmstructlib/IO/cif_parser.pyx":224
 *             raise IndexError("SaveVector row index out of range")
 *         return Save(self.filePyobj, &(deref(self.thisptr)[i]))
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.size()
 * cdef SaveVector(object filePyobj, vector[save[string]]* ptr):
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_11mmstructlib_2IO_10cif_parser_11_SaveVector_5__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_11mmstructlib_2IO_10cif_parser_11_SaveVector_5__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_11_SaveVector_4__len__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__SaveVector *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_11mmstructlib_2IO_10cif_parser_11_SaveVector_4__len__(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__SaveVector *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "mmstructlib/IO/cif_parser.pyx":225
 *         return Save(self.filePyobj, &(deref(self.thisptr)[i]))
 *     def __len__(self):
 *         return self.thisptr.size()             # <<<<<<<<<<<<<<
 * cdef SaveVector(object filePyobj, vector[save[string]]* ptr):
 *     cdef _SaveVector obj = _SaveVector.__new__(_SaveVector)
 */
  __pyx_r = __pyx_v_self->thisptr->size();
  goto __pyx_L0;

  /* "mmstructlib/IO/cif_parser.pyx":224
 *             raise IndexError("SaveVector row index out of range")
 *         return Save(self.filePyobj, &(deref(self.thisptr)[i]))
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.size()
 * cdef SaveVector(object filePyobj, vector[save[string]]* ptr):
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_11_SaveVector_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_11_SaveVector_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_11_SaveVector_6__reduce_cython__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__SaveVector *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_11_SaveVector_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__SaveVector *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._SaveVector.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_11_SaveVector_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_11_SaveVector_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_11_SaveVector_8__setstate_cython__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__SaveVector *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_11_SaveVector_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__SaveVector *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._SaveVector.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmstructlib/IO/cif_parser.pyx":226
 *     def __len__(self):
 *         return self.thisptr.size()
 * cdef SaveVector(object filePyobj, vector[save[string]]* ptr):             # <<<<<<<<<<<<<<
 *     cdef _SaveVector obj = _SaveVector.__new__(_SaveVector)
 *     obj.filePyobj = filePyobj
 */

static PyObject *__pyx_f_11mmstructlib_2IO_10cif_parser_SaveVector(PyObject *__pyx_v_filePyobj, std::vector<cif::save<std::string> >  *__pyx_v_ptr) {
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser__SaveVector *__pyx_v_obj = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("SaveVector", 0);

  /* "mmstructlib/IO/cif_parser.pyx":227
 *         return self.thisptr.size()
 * cdef SaveVector(object filePyobj, vector[save[string]]* ptr):
 *     cdef _SaveVector obj = _SaveVector.__new__(_SaveVector)             # <<<<<<<<<<<<<<
 *     obj.filePyobj = filePyobj
 *     obj.thisptr = ptr
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_11mmstructlib_2IO_10cif_parser__SaveVector(((PyTypeObject *)__pyx_ptype_11mmstructlib_2IO_10cif_parser__SaveVector), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_obj = ((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__SaveVector *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mmstructlib/IO/cif_parser.pyx":228
 * cdef SaveVector(object filePyobj, vector[save[string]]* ptr):
 *     cdef _SaveVector obj = _SaveVector.__new__(_SaveVector)
 *     obj.filePyobj = filePyobj             # <<<<<<<<<<<<<<
 *     obj.thisptr = ptr
 *     return obj
 */
  __Pyx_INCREF(__pyx_v_filePyobj);
  __Pyx_GIVEREF(__pyx_v_filePyobj);
  __Pyx_GOTREF(__pyx_v_obj->filePyobj);
  __Pyx_DECREF(__pyx_v_obj->filePyobj);
  __pyx_v_obj->filePyobj = __pyx_v_filePyobj;

  /* "mmstructlib/IO/cif_parser.pyx":229
 *     cdef _SaveVector obj = _SaveVector.__new__(_SaveVector)
 *     obj.filePyobj = filePyobj
 *     obj.thisptr = ptr             # <<<<<<<<<<<<<<
 *     return obj
 * 
 */
  __pyx_v_obj->thisptr = __pyx_v_ptr;

  /* "mmstructlib/IO/cif_parser.pyx":230
 *     obj.filePyobj = filePyobj
 *     obj.thisptr = ptr
 *     return obj             # <<<<<<<<<<<<<<
 * 
 * cdef class _Block:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_obj));
  __pyx_r = ((PyObject *)__pyx_v_obj);
  goto __pyx_L0;

  /* "mmstructlib/IO/cif_parser.pyx":226
 *     def __len__(self):
 *         return self.thisptr.size()
 * cdef SaveVector(object filePyobj, vector[save[string]]* ptr):             # <<<<<<<<<<<<<<
 *     cdef _SaveVector obj = _SaveVector.__new__(_SaveVector)
 *     obj.filePyobj = filePyobj
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser.SaveVector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmstructlib/IO/cif_parser.pyx":235
 *     cdef object filePyobj #keep a pointer to file to keep it alive
 *     cdef block[string]* thisptr
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise RuntimeError("Do not construct directly")
 *     property name:
 */

/* Python wrapper */
static int __pyx_pw_11mmstructlib_2IO_10cif_parser_6_Block_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_11mmstructlib_2IO_10cif_parser_6_Block_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_6_Block___init__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Block *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11mmstructlib_2IO_10cif_parser_6_Block___init__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Block *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "mmstructlib/IO/cif_parser.pyx":236
 *     cdef block[string]* thisptr
 *     def __init__(self):
 *         raise RuntimeError("Do not construct directly")             # <<<<<<<<<<<<<<
 *     property name:
 *         def __get__(self):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 236, __pyx_L1_error)

  /* "mmstructlib/IO/cif_parser.pyx":235
 *     cdef object filePyobj #keep a pointer to file to keep it alive
 *     cdef block[string]* thisptr
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise RuntimeError("Do not construct directly")
 *     property name:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._Block.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmstructlib/IO/cif_parser.pyx":238
 *         raise RuntimeError("Do not construct directly")
 *     property name:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).name.decode('UTF-8')
 *     property tables:
 */

/* Python wrapper */
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_6_Block_4name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_6_Block_4name_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_6_Block_4name___get__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Block *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_6_Block_4name___get__(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Block *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "mmstructlib/IO/cif_parser.pyx":239
 *     property name:
 *         def __get__(self):
 *             return deref(self.thisptr).name.decode('UTF-8')             # <<<<<<<<<<<<<<
 *     property tables:
 *         def __get__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_decode_cpp_string((*__pyx_v_self->thisptr).name, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "mmstructlib/IO/cif_parser.pyx":238
 *         raise RuntimeError("Do not construct directly")
 *     property name:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return deref(self.thisptr).name.decode('UTF-8')
 *     property tables:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._Block.name.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmstructlib/IO/cif_parser.pyx":241
 *             return deref(self.thisptr).name.decode('UTF-8')
 *     property tables:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return TableVector(self.filePyobj, &(self.thisptr.tables))
 *     property saves:
 */

/* Python wrapper */
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_6_Block_6tables_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_6_Block_6tables_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_6_Block_6tables___get__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Block *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_6_Block_6tables___get__(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Block *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "mmstructlib/IO/cif_parser.pyx":242
 *     property tables:
 *         def __get__(self):
 *             return TableVector(self.filePyobj, &(self.thisptr.tables))             # <<<<<<<<<<<<<<
 *     property saves:
 *         def __get__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_self->filePyobj;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_11mmstructlib_2IO_10cif_parser_TableVector(__pyx_t_1, (&__pyx_v_self->thisptr->tables)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "mmstructlib/IO/cif_parser.pyx":241
 *             return deref(self.thisptr).name.decode('UTF-8')
 *     property tables:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return TableVector(self.filePyobj, &(self.thisptr.tables))
 *     property saves:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._Block.tables.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmstructlib/IO/cif_parser.pyx":244
 *             return TableVector(self.filePyobj, &(self.thisptr.tables))
 *     property saves:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return SaveVector(self.filePyobj, &(self.thisptr.saves))
 * cdef Block(object filePyobj, block[string]* blockPtr):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_6_Block_5saves_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_6_Block_5saves_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_6_Block_5saves___get__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Block *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_6_Block_5saves___get__(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Block *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "mmstructlib/IO/cif_parser.pyx":245
 *     property saves:
 *         def __get__(self):
 *             return SaveVector(self.filePyobj, &(self.thisptr.saves))             # <<<<<<<<<<<<<<
 * cdef Block(object filePyobj, block[string]* blockPtr):
 *     cdef _Block obj = _Block.__new__(_Block)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_self->filePyobj;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_11mmstructlib_2IO_10cif_parser_SaveVector(__pyx_t_1, (&__pyx_v_self->thisptr->saves)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "mmstructlib/IO/cif_parser.pyx":244
 *             return TableVector(self.filePyobj, &(self.thisptr.tables))
 *     property saves:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return SaveVector(self.filePyobj, &(self.thisptr.saves))
 * cdef Block(object filePyobj, block[string]* blockPtr):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._Block.saves.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_6_Block_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_6_Block_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_6_Block_2__reduce_cython__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Block *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_6_Block_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Block *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._Block.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_6_Block_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_6_Block_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_6_Block_4__setstate_cython__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Block *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_6_Block_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Block *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._Block.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmstructlib/IO/cif_parser.pyx":246
 *         def __get__(self):
 *             return SaveVector(self.filePyobj, &(self.thisptr.saves))
 * cdef Block(object filePyobj, block[string]* blockPtr):             # <<<<<<<<<<<<<<
 *     cdef _Block obj = _Block.__new__(_Block)
 *     obj.filePyobj = filePyobj
 */

static PyObject *__pyx_f_11mmstructlib_2IO_10cif_parser_Block(PyObject *__pyx_v_filePyobj, cif::block<std::string>  *__pyx_v_blockPtr) {
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Block *__pyx_v_obj = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("Block", 0);

  /* "mmstructlib/IO/cif_parser.pyx":247
 *             return SaveVector(self.filePyobj, &(self.thisptr.saves))
 * cdef Block(object filePyobj, block[string]* blockPtr):
 *     cdef _Block obj = _Block.__new__(_Block)             # <<<<<<<<<<<<<<
 *     obj.filePyobj = filePyobj
 *     obj.thisptr = blockPtr
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_11mmstructlib_2IO_10cif_parser__Block(((PyTypeObject *)__pyx_ptype_11mmstructlib_2IO_10cif_parser__Block), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_obj = ((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Block *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mmstructlib/IO/cif_parser.pyx":248
 * cdef Block(object filePyobj, block[string]* blockPtr):
 *     cdef _Block obj = _Block.__new__(_Block)
 *     obj.filePyobj = filePyobj             # <<<<<<<<<<<<<<
 *     obj.thisptr = blockPtr
 *     return obj
 */
  __Pyx_INCREF(__pyx_v_filePyobj);
  __Pyx_GIVEREF(__pyx_v_filePyobj);
  __Pyx_GOTREF(__pyx_v_obj->filePyobj);
  __Pyx_DECREF(__pyx_v_obj->filePyobj);
  __pyx_v_obj->filePyobj = __pyx_v_filePyobj;

  /* "mmstructlib/IO/cif_parser.pyx":249
 *     cdef _Block obj = _Block.__new__(_Block)
 *     obj.filePyobj = filePyobj
 *     obj.thisptr = blockPtr             # <<<<<<<<<<<<<<
 *     return obj
 * 
 */
  __pyx_v_obj->thisptr = __pyx_v_blockPtr;

  /* "mmstructlib/IO/cif_parser.pyx":250
 *     obj.filePyobj = filePyobj
 *     obj.thisptr = blockPtr
 *     return obj             # <<<<<<<<<<<<<<
 * 
 * cdef class _BlockVector:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_obj));
  __pyx_r = ((PyObject *)__pyx_v_obj);
  goto __pyx_L0;

  /* "mmstructlib/IO/cif_parser.pyx":246
 *         def __get__(self):
 *             return SaveVector(self.filePyobj, &(self.thisptr.saves))
 * cdef Block(object filePyobj, block[string]* blockPtr):             # <<<<<<<<<<<<<<
 *     cdef _Block obj = _Block.__new__(_Block)
 *     obj.filePyobj = filePyobj
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser.Block", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmstructlib/IO/cif_parser.pyx":255
 *     cdef object filePyobj #keep a pointer to file to keep it alive
 *     cdef vector[block[string]]* thisptr
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise RuntimeError("Do not construct directly")
 *     def __getitem__(self, size_t i):
 */

/* Python wrapper */
static int __pyx_pw_11mmstructlib_2IO_10cif_parser_12_BlockVector_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_11mmstructlib_2IO_10cif_parser_12_BlockVector_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_12_BlockVector___init__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__BlockVector *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11mmstructlib_2IO_10cif_parser_12_BlockVector___init__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__BlockVector *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "mmstructlib/IO/cif_parser.pyx":256
 *     cdef vector[block[string]]* thisptr
 *     def __init__(self):
 *         raise RuntimeError("Do not construct directly")             # <<<<<<<<<<<<<<
 *     def __getitem__(self, size_t i):
 *         if not 0 <= i < self.thisptr.size():
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 256, __pyx_L1_error)

  /* "mmstructlib/IO/cif_parser.pyx":255
 *     cdef object filePyobj #keep a pointer to file to keep it alive
 *     cdef vector[block[string]]* thisptr
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise RuntimeError("Do not construct directly")
 *     def __getitem__(self, size_t i):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._BlockVector.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmstructlib/IO/cif_parser.pyx":257
 *     def __init__(self):
 *         raise RuntimeError("Do not construct directly")
 *     def __getitem__(self, size_t i):             # <<<<<<<<<<<<<<
 *         if not 0 <= i < self.thisptr.size():
 *             raise IndexError("BlockVector index out of range")
 */

/* Python wrapper */
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_12_BlockVector_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_12_BlockVector_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_As_size_t(__pyx_arg_i); if (unlikely((__pyx_v_i == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 257, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._BlockVector.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_12_BlockVector_2__getitem__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__BlockVector *)__pyx_v_self), ((size_t)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_12_BlockVector_2__getitem__(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__BlockVector *__pyx_v_self, size_t __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "mmstructlib/IO/cif_parser.pyx":258
 *         raise RuntimeError("Do not construct directly")
 *     def __getitem__(self, size_t i):
 *         if not 0 <= i < self.thisptr.size():             # <<<<<<<<<<<<<<
 *             raise IndexError("BlockVector index out of range")
 *         return Block(self.filePyobj, &(deref(self.thisptr)[i]))
 */
  __pyx_t_1 = (0 <= __pyx_v_i);
  if (__pyx_t_1) {
    __pyx_t_1 = (__pyx_v_i < __pyx_v_self->thisptr->size());
  }
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "mmstructlib/IO/cif_parser.pyx":259
 *     def __getitem__(self, size_t i):
 *         if not 0 <= i < self.thisptr.size():
 *             raise IndexError("BlockVector index out of range")             # <<<<<<<<<<<<<<
 *         return Block(self.filePyobj, &(deref(self.thisptr)[i]))
 *     def __len__(self):
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 259, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 259, __pyx_L1_error)

    /* "mmstructlib/IO/cif_parser.pyx":258
 *         raise RuntimeError("Do not construct directly")
 *     def __getitem__(self, size_t i):
 *         if not 0 <= i < self.thisptr.size():             # <<<<<<<<<<<<<<
 *             raise IndexError("BlockVector index out of range")
 *         return Block(self.filePyobj, &(deref(self.thisptr)[i]))
 */
  }

  /* "mmstructlib/IO/cif_parser.pyx":260
 *         if not 0 <= i < self.thisptr.size():
 *             raise IndexError("BlockVector index out of range")
 *         return Block(self.filePyobj, &(deref(self.thisptr)[i]))             # <<<<<<<<<<<<<<
 *     def __len__(self):
 *         return self.thisptr.size()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_v_self->filePyobj;
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_4 = __pyx_f_11mmstructlib_2IO_10cif_parser_Block(__pyx_t_3, (&((*__pyx_v_self->thisptr)[__pyx_v_i]))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "mmstructlib/IO/cif_parser.pyx":257
 *     def __init__(self):
 *         raise RuntimeError("Do not construct directly")
 *     def __getitem__(self, size_t i):             # <<<<<<<<<<<<<<
 *         if not 0 <= i < self.thisptr.size():
 *             raise IndexError("BlockVector index out of range")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._BlockVector.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmstructlib/IO/cif_parser.pyx":261
 *             raise IndexError("BlockVector index out of range")
 *         return Block(self.filePyobj, &(deref(self.thisptr)[i]))
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.size()
 * cdef object BlockVector(object filePyobj, vector[block[string]]* ptr):
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_11mmstructlib_2IO_10cif_parser_12_BlockVector_5__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_11mmstructlib_2IO_10cif_parser_12_BlockVector_5__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_12_BlockVector_4__len__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__BlockVector *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_11mmstructlib_2IO_10cif_parser_12_BlockVector_4__len__(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__BlockVector *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "mmstructlib/IO/cif_parser.pyx":262
 *         return Block(self.filePyobj, &(deref(self.thisptr)[i]))
 *     def __len__(self):
 *         return self.thisptr.size()             # <<<<<<<<<<<<<<
 * cdef object BlockVector(object filePyobj, vector[block[string]]* ptr):
 *     cdef _BlockVector obj = _BlockVector.__new__(_BlockVector)
 */
  __pyx_r = __pyx_v_self->thisptr->size();
  goto __pyx_L0;

  /* "mmstructlib/IO/cif_parser.pyx":261
 *             raise IndexError("BlockVector index out of range")
 *         return Block(self.filePyobj, &(deref(self.thisptr)[i]))
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.size()
 * cdef object BlockVector(object filePyobj, vector[block[string]]* ptr):
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_12_BlockVector_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_12_BlockVector_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_12_BlockVector_6__reduce_cython__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__BlockVector *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_12_BlockVector_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__BlockVector *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._BlockVector.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_12_BlockVector_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_12_BlockVector_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_12_BlockVector_8__setstate_cython__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__BlockVector *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_12_BlockVector_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser__BlockVector *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser._BlockVector.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmstructlib/IO/cif_parser.pyx":263
 *     def __len__(self):
 *         return self.thisptr.size()
 * cdef object BlockVector(object filePyobj, vector[block[string]]* ptr):             # <<<<<<<<<<<<<<
 *     cdef _BlockVector obj = _BlockVector.__new__(_BlockVector)
 *     obj.filePyobj = filePyobj
 */

static PyObject *__pyx_f_11mmstructlib_2IO_10cif_parser_BlockVector(PyObject *__pyx_v_filePyobj, std::vector<cif::block<std::string> >  *__pyx_v_ptr) {
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser__BlockVector *__pyx_v_obj = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("BlockVector", 0);

  /* "mmstructlib/IO/cif_parser.pyx":264
 *         return self.thisptr.size()
 * cdef object BlockVector(object filePyobj, vector[block[string]]* ptr):
 *     cdef _BlockVector obj = _BlockVector.__new__(_BlockVector)             # <<<<<<<<<<<<<<
 *     obj.filePyobj = filePyobj
 *     obj.thisptr = ptr
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_11mmstructlib_2IO_10cif_parser__BlockVector(((PyTypeObject *)__pyx_ptype_11mmstructlib_2IO_10cif_parser__BlockVector), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_obj = ((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__BlockVector *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "mmstructlib/IO/cif_parser.pyx":265
 * cdef object BlockVector(object filePyobj, vector[block[string]]* ptr):
 *     cdef _BlockVector obj = _BlockVector.__new__(_BlockVector)
 *     obj.filePyobj = filePyobj             # <<<<<<<<<<<<<<
 *     obj.thisptr = ptr
 *     return obj
 */
  __Pyx_INCREF(__pyx_v_filePyobj);
  __Pyx_GIVEREF(__pyx_v_filePyobj);
  __Pyx_GOTREF(__pyx_v_obj->filePyobj);
  __Pyx_DECREF(__pyx_v_obj->filePyobj);
  __pyx_v_obj->filePyobj = __pyx_v_filePyobj;

  /* "mmstructlib/IO/cif_parser.pyx":266
 *     cdef _BlockVector obj = _BlockVector.__new__(_BlockVector)
 *     obj.filePyobj = filePyobj
 *     obj.thisptr = ptr             # <<<<<<<<<<<<<<
 *     return obj
 * 
 */
  __pyx_v_obj->thisptr = __pyx_v_ptr;

  /* "mmstructlib/IO/cif_parser.pyx":267
 *     obj.filePyobj = filePyobj
 *     obj.thisptr = ptr
 *     return obj             # <<<<<<<<<<<<<<
 * 
 * cdef class File:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_obj));
  __pyx_r = ((PyObject *)__pyx_v_obj);
  goto __pyx_L0;

  /* "mmstructlib/IO/cif_parser.pyx":263
 *     def __len__(self):
 *         return self.thisptr.size()
 * cdef object BlockVector(object filePyobj, vector[block[string]]* ptr):             # <<<<<<<<<<<<<<
 *     cdef _BlockVector obj = _BlockVector.__new__(_BlockVector)
 *     obj.filePyobj = filePyobj
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser.BlockVector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmstructlib/IO/cif_parser.pyx":272
 *     cdef file[string] fileObj
 *     property blocks:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return BlockVector(self, &self.fileObj.blocks)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_4File_6blocks_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_4File_6blocks_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_4File_6blocks___get__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser_File *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_4File_6blocks___get__(struct __pyx_obj_11mmstructlib_2IO_10cif_parser_File *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "mmstructlib/IO/cif_parser.pyx":273
 *     property blocks:
 *         def __get__(self):
 *             return BlockVector(self, &self.fileObj.blocks)             # <<<<<<<<<<<<<<
 * 
 * def parse(object pyobj):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_11mmstructlib_2IO_10cif_parser_BlockVector(((PyObject *)__pyx_v_self), (&__pyx_v_self->fileObj.blocks)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "mmstructlib/IO/cif_parser.pyx":272
 *     cdef file[string] fileObj
 *     property blocks:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return BlockVector(self, &self.fileObj.blocks)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser.File.blocks.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.fileObj cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_4File_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_4File_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_4File___reduce_cython__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser_File *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_4File___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser_File *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.fileObj cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.fileObj cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.fileObj cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser.File.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.fileObj cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.fileObj cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_4File_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_4File_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_4File_2__setstate_cython__(((struct __pyx_obj_11mmstructlib_2IO_10cif_parser_File *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_4File_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11mmstructlib_2IO_10cif_parser_File *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.fileObj cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.fileObj cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.fileObj cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.fileObj cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser.File.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mmstructlib/IO/cif_parser.pyx":275
 *             return BlockVector(self, &self.fileObj.blocks)
 * 
 * def parse(object pyobj):             # <<<<<<<<<<<<<<
 *     cdef Py_buffer objbuff
 *     cdef const_char_ptr ptr
 */

/* Python wrapper */
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_1parse(PyObject *__pyx_self, PyObject *__pyx_v_pyobj); /*proto*/
static PyMethodDef __pyx_mdef_11mmstructlib_2IO_10cif_parser_1parse = {"parse", (PyCFunction)__pyx_pw_11mmstructlib_2IO_10cif_parser_1parse, METH_O, 0};
static PyObject *__pyx_pw_11mmstructlib_2IO_10cif_parser_1parse(PyObject *__pyx_self, PyObject *__pyx_v_pyobj) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("parse (wrapper)", 0);
  __pyx_r = __pyx_pf_11mmstructlib_2IO_10cif_parser_parse(__pyx_self, ((PyObject *)__pyx_v_pyobj));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11mmstructlib_2IO_10cif_parser_parse(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pyobj) {
  Py_buffer __pyx_v_objbuff;
  __pyx_t_11mmstructlib_2IO_10cif_parser_const_char_ptr __pyx_v_ptr;
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser_File *__pyx_v_fileObj = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("parse", 0);

  /* "mmstructlib/IO/cif_parser.pyx":281
 *     #if not isinstance(pyobj, basestring):
 *     #    raise RuntimeError("object is not a string")
 *     if not PyObject_CheckBuffer(pyobj):             # <<<<<<<<<<<<<<
 *         raise RuntimeError("argument does not support buffers")
 *     if PyObject_GetBuffer(pyobj, &objbuff, PyBUF_SIMPLE):
 */
  __pyx_t_1 = ((!(PyObject_CheckBuffer(__pyx_v_pyobj) != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "mmstructlib/IO/cif_parser.pyx":282
 *     #    raise RuntimeError("object is not a string")
 *     if not PyObject_CheckBuffer(pyobj):
 *         raise RuntimeError("argument does not support buffers")             # <<<<<<<<<<<<<<
 *     if PyObject_GetBuffer(pyobj, &objbuff, PyBUF_SIMPLE):
 *         raise RuntimeError("Inconsistent buffer object")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 282, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 282, __pyx_L1_error)

    /* "mmstructlib/IO/cif_parser.pyx":281
 *     #if not isinstance(pyobj, basestring):
 *     #    raise RuntimeError("object is not a string")
 *     if not PyObject_CheckBuffer(pyobj):             # <<<<<<<<<<<<<<
 *         raise RuntimeError("argument does not support buffers")
 *     if PyObject_GetBuffer(pyobj, &objbuff, PyBUF_SIMPLE):
 */
  }

  /* "mmstructlib/IO/cif_parser.pyx":283
 *     if not PyObject_CheckBuffer(pyobj):
 *         raise RuntimeError("argument does not support buffers")
 *     if PyObject_GetBuffer(pyobj, &objbuff, PyBUF_SIMPLE):             # <<<<<<<<<<<<<<
 *         raise RuntimeError("Inconsistent buffer object")
 *     ptr = <const_char_ptr>objbuff.buf
 */
  __pyx_t_3 = PyObject_GetBuffer(__pyx_v_pyobj, (&__pyx_v_objbuff), PyBUF_SIMPLE); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 283, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_3 != 0);
  if (unlikely(__pyx_t_1)) {

    /* "mmstructlib/IO/cif_parser.pyx":284
 *         raise RuntimeError("argument does not support buffers")
 *     if PyObject_GetBuffer(pyobj, &objbuff, PyBUF_SIMPLE):
 *         raise RuntimeError("Inconsistent buffer object")             # <<<<<<<<<<<<<<
 *     ptr = <const_char_ptr>objbuff.buf
 *     fileObj = File()
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 284, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 284, __pyx_L1_error)

    /* "mmstructlib/IO/cif_parser.pyx":283
 *     if not PyObject_CheckBuffer(pyobj):
 *         raise RuntimeError("argument does not support buffers")
 *     if PyObject_GetBuffer(pyobj, &objbuff, PyBUF_SIMPLE):             # <<<<<<<<<<<<<<
 *         raise RuntimeError("Inconsistent buffer object")
 *     ptr = <const_char_ptr>objbuff.buf
 */
  }

  /* "mmstructlib/IO/cif_parser.pyx":285
 *     if PyObject_GetBuffer(pyobj, &objbuff, PyBUF_SIMPLE):
 *         raise RuntimeError("Inconsistent buffer object")
 *     ptr = <const_char_ptr>objbuff.buf             # <<<<<<<<<<<<<<
 *     fileObj = File()
 *     parseString(ptr, ptr+objbuff.len, fileObj.fileObj)
 */
  __pyx_v_ptr = ((__pyx_t_11mmstructlib_2IO_10cif_parser_const_char_ptr)__pyx_v_objbuff.buf);

  /* "mmstructlib/IO/cif_parser.pyx":286
 *         raise RuntimeError("Inconsistent buffer object")
 *     ptr = <const_char_ptr>objbuff.buf
 *     fileObj = File()             # <<<<<<<<<<<<<<
 *     parseString(ptr, ptr+objbuff.len, fileObj.fileObj)
 *     PyBuffer_Release(&objbuff)
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11mmstructlib_2IO_10cif_parser_File)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_fileObj = ((struct __pyx_obj_11mmstructlib_2IO_10cif_parser_File *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "mmstructlib/IO/cif_parser.pyx":287
 *     ptr = <const_char_ptr>objbuff.buf
 *     fileObj = File()
 *     parseString(ptr, ptr+objbuff.len, fileObj.fileObj)             # <<<<<<<<<<<<<<
 *     PyBuffer_Release(&objbuff)
 *     return fileObj
 */
  try {
    parseString<__pyx_t_11mmstructlib_2IO_10cif_parser_const_char_ptr>(__pyx_v_ptr, (__pyx_v_ptr + __pyx_v_objbuff.len), __pyx_v_fileObj->fileObj);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 287, __pyx_L1_error)
  }

  /* "mmstructlib/IO/cif_parser.pyx":288
 *     fileObj = File()
 *     parseString(ptr, ptr+objbuff.len, fileObj.fileObj)
 *     PyBuffer_Release(&objbuff)             # <<<<<<<<<<<<<<
 *     return fileObj
 * 
 */
  PyBuffer_Release((&__pyx_v_objbuff));

  /* "mmstructlib/IO/cif_parser.pyx":289
 *     parseString(ptr, ptr+objbuff.len, fileObj.fileObj)
 *     PyBuffer_Release(&objbuff)
 *     return fileObj             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_fileObj));
  __pyx_r = ((PyObject *)__pyx_v_fileObj);
  goto __pyx_L0;

  /* "mmstructlib/IO/cif_parser.pyx":275
 *             return BlockVector(self, &self.fileObj.blocks)
 * 
 * def parse(object pyobj):             # <<<<<<<<<<<<<<
 *     cdef Py_buffer objbuff
 *     cdef const_char_ptr ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("mmstructlib.IO.cif_parser.parse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_fileObj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":14
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0             # <<<<<<<<<<<<<<
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)
 */
  __pyx_v_length = 0;

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_string(const std::vector<std::string>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_string", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __pyx_convert_PyBytes_string_to_py_std__in_string((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_11mmstructlib_2IO_10cif_parser__Row(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Row *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Row *)o);
  p->filePyobj = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_11mmstructlib_2IO_10cif_parser__Row(PyObject *o) {
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Row *p = (struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Row *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->filePyobj);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_11mmstructlib_2IO_10cif_parser__Row(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Row *p = (struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Row *)o;
  if (p->filePyobj) {
    e = (*v)(p->filePyobj, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_11mmstructlib_2IO_10cif_parser__Row(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Row *p = (struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Row *)o;
  tmp = ((PyObject*)p->filePyobj);
  p->filePyobj = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_11mmstructlib_2IO_10cif_parser__Row(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_11mmstructlib_2IO_10cif_parser__Row[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_11mmstructlib_2IO_10cif_parser_4_Row_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_11mmstructlib_2IO_10cif_parser_4_Row_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence__Row = {
  __pyx_pw_11mmstructlib_2IO_10cif_parser_4_Row_5__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_11mmstructlib_2IO_10cif_parser__Row, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping__Row = {
  __pyx_pw_11mmstructlib_2IO_10cif_parser_4_Row_5__len__, /*mp_length*/
  __pyx_pw_11mmstructlib_2IO_10cif_parser_4_Row_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_11mmstructlib_2IO_10cif_parser__Row = {
  PyVarObject_HEAD_INIT(0, 0)
  "mmstructlib.IO.cif_parser._Row", /*tp_name*/
  sizeof(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Row), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11mmstructlib_2IO_10cif_parser__Row, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence__Row, /*tp_as_sequence*/
  &__pyx_tp_as_mapping__Row, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_11mmstructlib_2IO_10cif_parser__Row, /*tp_traverse*/
  __pyx_tp_clear_11mmstructlib_2IO_10cif_parser__Row, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_11mmstructlib_2IO_10cif_parser__Row, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_11mmstructlib_2IO_10cif_parser_4_Row_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11mmstructlib_2IO_10cif_parser__Row, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_11mmstructlib_2IO_10cif_parser__CellsIterator(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser__CellsIterator *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__CellsIterator *)o);
  p->filePyobj = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_11mmstructlib_2IO_10cif_parser__CellsIterator(PyObject *o) {
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser__CellsIterator *p = (struct __pyx_obj_11mmstructlib_2IO_10cif_parser__CellsIterator *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->filePyobj);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_11mmstructlib_2IO_10cif_parser__CellsIterator(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser__CellsIterator *p = (struct __pyx_obj_11mmstructlib_2IO_10cif_parser__CellsIterator *)o;
  if (p->filePyobj) {
    e = (*v)(p->filePyobj, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_11mmstructlib_2IO_10cif_parser__CellsIterator(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser__CellsIterator *p = (struct __pyx_obj_11mmstructlib_2IO_10cif_parser__CellsIterator *)o;
  tmp = ((PyObject*)p->filePyobj);
  p->filePyobj = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_specialmethod___pyx_pw_11mmstructlib_2IO_10cif_parser_14_CellsIterator_3__next__(PyObject *self, CYTHON_UNUSED PyObject *arg) {return __pyx_pw_11mmstructlib_2IO_10cif_parser_14_CellsIterator_3__next__(self);}

static PyMethodDef __pyx_methods_11mmstructlib_2IO_10cif_parser__CellsIterator[] = {
  {"__next__", (PyCFunction)__pyx_specialmethod___pyx_pw_11mmstructlib_2IO_10cif_parser_14_CellsIterator_3__next__, METH_NOARGS|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_11mmstructlib_2IO_10cif_parser_14_CellsIterator_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_11mmstructlib_2IO_10cif_parser_14_CellsIterator_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_11mmstructlib_2IO_10cif_parser__CellsIterator = {
  PyVarObject_HEAD_INIT(0, 0)
  "mmstructlib.IO.cif_parser._CellsIterator", /*tp_name*/
  sizeof(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__CellsIterator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11mmstructlib_2IO_10cif_parser__CellsIterator, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_11mmstructlib_2IO_10cif_parser__CellsIterator, /*tp_traverse*/
  __pyx_tp_clear_11mmstructlib_2IO_10cif_parser__CellsIterator, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  __pyx_pw_11mmstructlib_2IO_10cif_parser_14_CellsIterator_3__next__, /*tp_iternext*/
  __pyx_methods_11mmstructlib_2IO_10cif_parser__CellsIterator, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_11mmstructlib_2IO_10cif_parser_14_CellsIterator_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11mmstructlib_2IO_10cif_parser__CellsIterator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_11mmstructlib_2IO_10cif_parser__Cells(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Cells *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Cells *)o);
  p->filePyobj = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_11mmstructlib_2IO_10cif_parser__Cells(PyObject *o) {
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Cells *p = (struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Cells *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->filePyobj);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_11mmstructlib_2IO_10cif_parser__Cells(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Cells *p = (struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Cells *)o;
  if (p->filePyobj) {
    e = (*v)(p->filePyobj, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_11mmstructlib_2IO_10cif_parser__Cells(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Cells *p = (struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Cells *)o;
  tmp = ((PyObject*)p->filePyobj);
  p->filePyobj = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_11mmstructlib_2IO_10cif_parser__Cells(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_11mmstructlib_2IO_10cif_parser__Cells[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_11mmstructlib_2IO_10cif_parser_6_Cells_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_11mmstructlib_2IO_10cif_parser_6_Cells_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence__Cells = {
  __pyx_pw_11mmstructlib_2IO_10cif_parser_6_Cells_5__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_11mmstructlib_2IO_10cif_parser__Cells, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping__Cells = {
  __pyx_pw_11mmstructlib_2IO_10cif_parser_6_Cells_5__len__, /*mp_length*/
  __pyx_pw_11mmstructlib_2IO_10cif_parser_6_Cells_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_11mmstructlib_2IO_10cif_parser__Cells = {
  PyVarObject_HEAD_INIT(0, 0)
  "mmstructlib.IO.cif_parser._Cells", /*tp_name*/
  sizeof(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Cells), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11mmstructlib_2IO_10cif_parser__Cells, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence__Cells, /*tp_as_sequence*/
  &__pyx_tp_as_mapping__Cells, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_11mmstructlib_2IO_10cif_parser__Cells, /*tp_traverse*/
  __pyx_tp_clear_11mmstructlib_2IO_10cif_parser__Cells, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_11mmstructlib_2IO_10cif_parser_6_Cells_7__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_11mmstructlib_2IO_10cif_parser__Cells, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_11mmstructlib_2IO_10cif_parser_6_Cells_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11mmstructlib_2IO_10cif_parser__Cells, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_11mmstructlib_2IO_10cif_parser__Table(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Table *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Table *)o);
  new((void*)&(p->column_index)) std::map<std::string,size_t> ();
  p->filePyobj = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_11mmstructlib_2IO_10cif_parser__Table(PyObject *o) {
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Table *p = (struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Table *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->column_index);
  Py_CLEAR(p->filePyobj);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_11mmstructlib_2IO_10cif_parser__Table(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Table *p = (struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Table *)o;
  if (p->filePyobj) {
    e = (*v)(p->filePyobj, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_11mmstructlib_2IO_10cif_parser__Table(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Table *p = (struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Table *)o;
  tmp = ((PyObject*)p->filePyobj);
  p->filePyobj = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_11mmstructlib_2IO_10cif_parser_6_Table_name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11mmstructlib_2IO_10cif_parser_6_Table_4name_1__get__(o);
}

static PyObject *__pyx_getprop_11mmstructlib_2IO_10cif_parser_6_Table_cell_names(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11mmstructlib_2IO_10cif_parser_6_Table_10cell_names_1__get__(o);
}

static PyObject *__pyx_getprop_11mmstructlib_2IO_10cif_parser_6_Table_cells(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11mmstructlib_2IO_10cif_parser_6_Table_5cells_1__get__(o);
}

static PyMethodDef __pyx_methods_11mmstructlib_2IO_10cif_parser__Table[] = {
  {"index", (PyCFunction)__pyx_pw_11mmstructlib_2IO_10cif_parser_6_Table_3index, METH_O, 0},
  {"field", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11mmstructlib_2IO_10cif_parser_6_Table_5field, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_11mmstructlib_2IO_10cif_parser_6_Table_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_11mmstructlib_2IO_10cif_parser_6_Table_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_11mmstructlib_2IO_10cif_parser__Table[] = {
  {(char *)"name", __pyx_getprop_11mmstructlib_2IO_10cif_parser_6_Table_name, 0, (char *)0, 0},
  {(char *)"cell_names", __pyx_getprop_11mmstructlib_2IO_10cif_parser_6_Table_cell_names, 0, (char *)0, 0},
  {(char *)"cells", __pyx_getprop_11mmstructlib_2IO_10cif_parser_6_Table_cells, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_11mmstructlib_2IO_10cif_parser__Table = {
  PyVarObject_HEAD_INIT(0, 0)
  "mmstructlib.IO.cif_parser._Table", /*tp_name*/
  sizeof(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Table), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11mmstructlib_2IO_10cif_parser__Table, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_11mmstructlib_2IO_10cif_parser__Table, /*tp_traverse*/
  __pyx_tp_clear_11mmstructlib_2IO_10cif_parser__Table, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_11mmstructlib_2IO_10cif_parser__Table, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_11mmstructlib_2IO_10cif_parser__Table, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_11mmstructlib_2IO_10cif_parser_6_Table_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11mmstructlib_2IO_10cif_parser__Table, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_11mmstructlib_2IO_10cif_parser__TableVector(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser__TableVector *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__TableVector *)o);
  new((void*)&(p->table_index)) std::map<std::string,size_t> ();
  p->filePyobj = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_11mmstructlib_2IO_10cif_parser__TableVector(PyObject *o) {
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser__TableVector *p = (struct __pyx_obj_11mmstructlib_2IO_10cif_parser__TableVector *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->table_index);
  Py_CLEAR(p->filePyobj);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_11mmstructlib_2IO_10cif_parser__TableVector(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser__TableVector *p = (struct __pyx_obj_11mmstructlib_2IO_10cif_parser__TableVector *)o;
  if (p->filePyobj) {
    e = (*v)(p->filePyobj, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_11mmstructlib_2IO_10cif_parser__TableVector(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser__TableVector *p = (struct __pyx_obj_11mmstructlib_2IO_10cif_parser__TableVector *)o;
  tmp = ((PyObject*)p->filePyobj);
  p->filePyobj = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_11mmstructlib_2IO_10cif_parser__TableVector(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_11mmstructlib_2IO_10cif_parser__TableVector[] = {
  {"get", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11mmstructlib_2IO_10cif_parser_12_TableVector_5get, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_11mmstructlib_2IO_10cif_parser_12_TableVector_11__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_11mmstructlib_2IO_10cif_parser_12_TableVector_13__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence__TableVector = {
  __pyx_pw_11mmstructlib_2IO_10cif_parser_12_TableVector_9__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_11mmstructlib_2IO_10cif_parser__TableVector, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  __pyx_pw_11mmstructlib_2IO_10cif_parser_12_TableVector_7__contains__, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping__TableVector = {
  __pyx_pw_11mmstructlib_2IO_10cif_parser_12_TableVector_9__len__, /*mp_length*/
  __pyx_pw_11mmstructlib_2IO_10cif_parser_12_TableVector_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_11mmstructlib_2IO_10cif_parser__TableVector = {
  PyVarObject_HEAD_INIT(0, 0)
  "mmstructlib.IO.cif_parser._TableVector", /*tp_name*/
  sizeof(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__TableVector), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11mmstructlib_2IO_10cif_parser__TableVector, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence__TableVector, /*tp_as_sequence*/
  &__pyx_tp_as_mapping__TableVector, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_11mmstructlib_2IO_10cif_parser__TableVector, /*tp_traverse*/
  __pyx_tp_clear_11mmstructlib_2IO_10cif_parser__TableVector, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_11mmstructlib_2IO_10cif_parser__TableVector, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_11mmstructlib_2IO_10cif_parser_12_TableVector_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11mmstructlib_2IO_10cif_parser__TableVector, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_11mmstructlib_2IO_10cif_parser__Save(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Save *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Save *)o);
  p->filePyobj = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_11mmstructlib_2IO_10cif_parser__Save(PyObject *o) {
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Save *p = (struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Save *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->filePyobj);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_11mmstructlib_2IO_10cif_parser__Save(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Save *p = (struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Save *)o;
  if (p->filePyobj) {
    e = (*v)(p->filePyobj, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_11mmstructlib_2IO_10cif_parser__Save(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Save *p = (struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Save *)o;
  tmp = ((PyObject*)p->filePyobj);
  p->filePyobj = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_11mmstructlib_2IO_10cif_parser_5_Save_tag(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11mmstructlib_2IO_10cif_parser_5_Save_3tag_1__get__(o);
}

static PyObject *__pyx_getprop_11mmstructlib_2IO_10cif_parser_5_Save_field(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11mmstructlib_2IO_10cif_parser_5_Save_5field_1__get__(o);
}

static PyObject *__pyx_getprop_11mmstructlib_2IO_10cif_parser_5_Save_tables(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11mmstructlib_2IO_10cif_parser_5_Save_6tables_1__get__(o);
}

static PyMethodDef __pyx_methods_11mmstructlib_2IO_10cif_parser__Save[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_11mmstructlib_2IO_10cif_parser_5_Save_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_11mmstructlib_2IO_10cif_parser_5_Save_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_11mmstructlib_2IO_10cif_parser__Save[] = {
  {(char *)"tag", __pyx_getprop_11mmstructlib_2IO_10cif_parser_5_Save_tag, 0, (char *)0, 0},
  {(char *)"field", __pyx_getprop_11mmstructlib_2IO_10cif_parser_5_Save_field, 0, (char *)0, 0},
  {(char *)"tables", __pyx_getprop_11mmstructlib_2IO_10cif_parser_5_Save_tables, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_11mmstructlib_2IO_10cif_parser__Save = {
  PyVarObject_HEAD_INIT(0, 0)
  "mmstructlib.IO.cif_parser._Save", /*tp_name*/
  sizeof(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Save), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11mmstructlib_2IO_10cif_parser__Save, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_11mmstructlib_2IO_10cif_parser__Save, /*tp_traverse*/
  __pyx_tp_clear_11mmstructlib_2IO_10cif_parser__Save, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_11mmstructlib_2IO_10cif_parser__Save, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_11mmstructlib_2IO_10cif_parser__Save, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_11mmstructlib_2IO_10cif_parser_5_Save_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11mmstructlib_2IO_10cif_parser__Save, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_11mmstructlib_2IO_10cif_parser__SaveVector(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser__SaveVector *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__SaveVector *)o);
  p->filePyobj = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_11mmstructlib_2IO_10cif_parser__SaveVector(PyObject *o) {
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser__SaveVector *p = (struct __pyx_obj_11mmstructlib_2IO_10cif_parser__SaveVector *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->filePyobj);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_11mmstructlib_2IO_10cif_parser__SaveVector(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser__SaveVector *p = (struct __pyx_obj_11mmstructlib_2IO_10cif_parser__SaveVector *)o;
  if (p->filePyobj) {
    e = (*v)(p->filePyobj, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_11mmstructlib_2IO_10cif_parser__SaveVector(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser__SaveVector *p = (struct __pyx_obj_11mmstructlib_2IO_10cif_parser__SaveVector *)o;
  tmp = ((PyObject*)p->filePyobj);
  p->filePyobj = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_11mmstructlib_2IO_10cif_parser__SaveVector(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_11mmstructlib_2IO_10cif_parser__SaveVector[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_11mmstructlib_2IO_10cif_parser_11_SaveVector_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_11mmstructlib_2IO_10cif_parser_11_SaveVector_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence__SaveVector = {
  __pyx_pw_11mmstructlib_2IO_10cif_parser_11_SaveVector_5__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_11mmstructlib_2IO_10cif_parser__SaveVector, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping__SaveVector = {
  __pyx_pw_11mmstructlib_2IO_10cif_parser_11_SaveVector_5__len__, /*mp_length*/
  __pyx_pw_11mmstructlib_2IO_10cif_parser_11_SaveVector_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_11mmstructlib_2IO_10cif_parser__SaveVector = {
  PyVarObject_HEAD_INIT(0, 0)
  "mmstructlib.IO.cif_parser._SaveVector", /*tp_name*/
  sizeof(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__SaveVector), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11mmstructlib_2IO_10cif_parser__SaveVector, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence__SaveVector, /*tp_as_sequence*/
  &__pyx_tp_as_mapping__SaveVector, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_11mmstructlib_2IO_10cif_parser__SaveVector, /*tp_traverse*/
  __pyx_tp_clear_11mmstructlib_2IO_10cif_parser__SaveVector, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_11mmstructlib_2IO_10cif_parser__SaveVector, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_11mmstructlib_2IO_10cif_parser_11_SaveVector_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11mmstructlib_2IO_10cif_parser__SaveVector, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_11mmstructlib_2IO_10cif_parser__Block(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Block *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Block *)o);
  p->filePyobj = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_11mmstructlib_2IO_10cif_parser__Block(PyObject *o) {
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Block *p = (struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Block *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->filePyobj);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_11mmstructlib_2IO_10cif_parser__Block(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Block *p = (struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Block *)o;
  if (p->filePyobj) {
    e = (*v)(p->filePyobj, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_11mmstructlib_2IO_10cif_parser__Block(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Block *p = (struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Block *)o;
  tmp = ((PyObject*)p->filePyobj);
  p->filePyobj = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_11mmstructlib_2IO_10cif_parser_6_Block_name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11mmstructlib_2IO_10cif_parser_6_Block_4name_1__get__(o);
}

static PyObject *__pyx_getprop_11mmstructlib_2IO_10cif_parser_6_Block_tables(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11mmstructlib_2IO_10cif_parser_6_Block_6tables_1__get__(o);
}

static PyObject *__pyx_getprop_11mmstructlib_2IO_10cif_parser_6_Block_saves(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11mmstructlib_2IO_10cif_parser_6_Block_5saves_1__get__(o);
}

static PyMethodDef __pyx_methods_11mmstructlib_2IO_10cif_parser__Block[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_11mmstructlib_2IO_10cif_parser_6_Block_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_11mmstructlib_2IO_10cif_parser_6_Block_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_11mmstructlib_2IO_10cif_parser__Block[] = {
  {(char *)"name", __pyx_getprop_11mmstructlib_2IO_10cif_parser_6_Block_name, 0, (char *)0, 0},
  {(char *)"tables", __pyx_getprop_11mmstructlib_2IO_10cif_parser_6_Block_tables, 0, (char *)0, 0},
  {(char *)"saves", __pyx_getprop_11mmstructlib_2IO_10cif_parser_6_Block_saves, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_11mmstructlib_2IO_10cif_parser__Block = {
  PyVarObject_HEAD_INIT(0, 0)
  "mmstructlib.IO.cif_parser._Block", /*tp_name*/
  sizeof(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__Block), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11mmstructlib_2IO_10cif_parser__Block, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_11mmstructlib_2IO_10cif_parser__Block, /*tp_traverse*/
  __pyx_tp_clear_11mmstructlib_2IO_10cif_parser__Block, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_11mmstructlib_2IO_10cif_parser__Block, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_11mmstructlib_2IO_10cif_parser__Block, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_11mmstructlib_2IO_10cif_parser_6_Block_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11mmstructlib_2IO_10cif_parser__Block, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_11mmstructlib_2IO_10cif_parser__BlockVector(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser__BlockVector *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_11mmstructlib_2IO_10cif_parser__BlockVector *)o);
  p->filePyobj = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_11mmstructlib_2IO_10cif_parser__BlockVector(PyObject *o) {
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser__BlockVector *p = (struct __pyx_obj_11mmstructlib_2IO_10cif_parser__BlockVector *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->filePyobj);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_11mmstructlib_2IO_10cif_parser__BlockVector(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser__BlockVector *p = (struct __pyx_obj_11mmstructlib_2IO_10cif_parser__BlockVector *)o;
  if (p->filePyobj) {
    e = (*v)(p->filePyobj, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_11mmstructlib_2IO_10cif_parser__BlockVector(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser__BlockVector *p = (struct __pyx_obj_11mmstructlib_2IO_10cif_parser__BlockVector *)o;
  tmp = ((PyObject*)p->filePyobj);
  p->filePyobj = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_11mmstructlib_2IO_10cif_parser__BlockVector(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_11mmstructlib_2IO_10cif_parser__BlockVector[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_11mmstructlib_2IO_10cif_parser_12_BlockVector_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_11mmstructlib_2IO_10cif_parser_12_BlockVector_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence__BlockVector = {
  __pyx_pw_11mmstructlib_2IO_10cif_parser_12_BlockVector_5__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_11mmstructlib_2IO_10cif_parser__BlockVector, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping__BlockVector = {
  __pyx_pw_11mmstructlib_2IO_10cif_parser_12_BlockVector_5__len__, /*mp_length*/
  __pyx_pw_11mmstructlib_2IO_10cif_parser_12_BlockVector_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_11mmstructlib_2IO_10cif_parser__BlockVector = {
  PyVarObject_HEAD_INIT(0, 0)
  "mmstructlib.IO.cif_parser._BlockVector", /*tp_name*/
  sizeof(struct __pyx_obj_11mmstructlib_2IO_10cif_parser__BlockVector), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11mmstructlib_2IO_10cif_parser__BlockVector, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence__BlockVector, /*tp_as_sequence*/
  &__pyx_tp_as_mapping__BlockVector, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_11mmstructlib_2IO_10cif_parser__BlockVector, /*tp_traverse*/
  __pyx_tp_clear_11mmstructlib_2IO_10cif_parser__BlockVector, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_11mmstructlib_2IO_10cif_parser__BlockVector, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_11mmstructlib_2IO_10cif_parser_12_BlockVector_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11mmstructlib_2IO_10cif_parser__BlockVector, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_11mmstructlib_2IO_10cif_parser_File(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser_File *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_11mmstructlib_2IO_10cif_parser_File *)o);
  new((void*)&(p->fileObj)) cif::file<std::string> ();
  return o;
}

static void __pyx_tp_dealloc_11mmstructlib_2IO_10cif_parser_File(PyObject *o) {
  struct __pyx_obj_11mmstructlib_2IO_10cif_parser_File *p = (struct __pyx_obj_11mmstructlib_2IO_10cif_parser_File *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->fileObj);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_11mmstructlib_2IO_10cif_parser_4File_blocks(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_11mmstructlib_2IO_10cif_parser_4File_6blocks_1__get__(o);
}

static PyMethodDef __pyx_methods_11mmstructlib_2IO_10cif_parser_File[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_11mmstructlib_2IO_10cif_parser_4File_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_11mmstructlib_2IO_10cif_parser_4File_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_11mmstructlib_2IO_10cif_parser_File[] = {
  {(char *)"blocks", __pyx_getprop_11mmstructlib_2IO_10cif_parser_4File_blocks, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_11mmstructlib_2IO_10cif_parser_File = {
  PyVarObject_HEAD_INIT(0, 0)
  "mmstructlib.IO.cif_parser.File", /*tp_name*/
  sizeof(struct __pyx_obj_11mmstructlib_2IO_10cif_parser_File), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11mmstructlib_2IO_10cif_parser_File, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_11mmstructlib_2IO_10cif_parser_File, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_11mmstructlib_2IO_10cif_parser_File, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11mmstructlib_2IO_10cif_parser_File, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_cif_parser(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_cif_parser},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "cif_parser",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_Block, __pyx_k_Block, sizeof(__pyx_k_Block), 0, 0, 1, 1},
  {&__pyx_n_s_BlockVector, __pyx_k_BlockVector, sizeof(__pyx_k_BlockVector), 0, 0, 1, 1},
  {&__pyx_kp_s_BlockVector_index_out_of_range, __pyx_k_BlockVector_index_out_of_range, sizeof(__pyx_k_BlockVector_index_out_of_range), 0, 0, 1, 0},
  {&__pyx_n_s_Cells, __pyx_k_Cells, sizeof(__pyx_k_Cells), 0, 0, 1, 1},
  {&__pyx_n_s_CellsIterator, __pyx_k_CellsIterator, sizeof(__pyx_k_CellsIterator), 0, 0, 1, 1},
  {&__pyx_kp_s_Cells_row_index_out_of_range, __pyx_k_Cells_row_index_out_of_range, sizeof(__pyx_k_Cells_row_index_out_of_range), 0, 0, 1, 0},
  {&__pyx_kp_s_Do_not_construct_directly, __pyx_k_Do_not_construct_directly, sizeof(__pyx_k_Do_not_construct_directly), 0, 0, 1, 0},
  {&__pyx_n_s_File, __pyx_k_File, sizeof(__pyx_k_File), 0, 0, 1, 1},
  {&__pyx_kp_s_Inconsistent_buffer_object, __pyx_k_Inconsistent_buffer_object, sizeof(__pyx_k_Inconsistent_buffer_object), 0, 0, 1, 0},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_n_s_Row, __pyx_k_Row, sizeof(__pyx_k_Row), 0, 0, 1, 1},
  {&__pyx_kp_s_Row_index_out_of_range, __pyx_k_Row_index_out_of_range, sizeof(__pyx_k_Row_index_out_of_range), 0, 0, 1, 0},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_Save, __pyx_k_Save, sizeof(__pyx_k_Save), 0, 0, 1, 1},
  {&__pyx_n_s_SaveVector, __pyx_k_SaveVector, sizeof(__pyx_k_SaveVector), 0, 0, 1, 1},
  {&__pyx_kp_s_SaveVector_row_index_out_of_rang, __pyx_k_SaveVector_row_index_out_of_rang, sizeof(__pyx_k_SaveVector_row_index_out_of_rang), 0, 0, 1, 0},
  {&__pyx_n_s_StopIteration, __pyx_k_StopIteration, sizeof(__pyx_k_StopIteration), 0, 0, 1, 1},
  {&__pyx_n_s_Table, __pyx_k_Table, sizeof(__pyx_k_Table), 0, 0, 1, 1},
  {&__pyx_n_s_TableVector, __pyx_k_TableVector, sizeof(__pyx_k_TableVector), 0, 0, 1, 1},
  {&__pyx_kp_s_TableVector_getitem_takes_int_or, __pyx_k_TableVector_getitem_takes_int_or, sizeof(__pyx_k_TableVector_getitem_takes_int_or), 0, 0, 1, 0},
  {&__pyx_kp_s_TableVector_name_not_found, __pyx_k_TableVector_name_not_found, sizeof(__pyx_k_TableVector_name_not_found), 0, 0, 1, 0},
  {&__pyx_kp_s_TableVector_row_index_out_of_ran, __pyx_k_TableVector_row_index_out_of_ran, sizeof(__pyx_k_TableVector_row_index_out_of_ran), 0, 0, 1, 0},
  {&__pyx_n_s_Table___get___locals_lambda, __pyx_k_Table___get___locals_lambda, sizeof(__pyx_k_Table___get___locals_lambda), 0, 0, 1, 1},
  {&__pyx_kp_s_Table_data_size_not_a_multiple_o, __pyx_k_Table_data_size_not_a_multiple_o, sizeof(__pyx_k_Table_data_size_not_a_multiple_o), 0, 0, 1, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_UTF_8, __pyx_k_UTF_8, sizeof(__pyx_k_UTF_8), 0, 0, 1, 0},
  {&__pyx_kp_s_argument_does_not_support_buffer, __pyx_k_argument_does_not_support_buffer, sizeof(__pyx_k_argument_does_not_support_buffer), 0, 0, 1, 0},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_decode, __pyx_k_decode, sizeof(__pyx_k_decode), 0, 0, 1, 1},
  {&__pyx_n_s_default, __pyx_k_default, sizeof(__pyx_k_default), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_fileObj, __pyx_k_fileObj, sizeof(__pyx_k_fileObj), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_key_str, __pyx_k_key_str, sizeof(__pyx_k_key_str), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_map, __pyx_k_map, sizeof(__pyx_k_map), 0, 0, 1, 1},
  {&__pyx_n_s_mmstructlib_IO_cif_parser, __pyx_k_mmstructlib_IO_cif_parser, sizeof(__pyx_k_mmstructlib_IO_cif_parser), 0, 0, 1, 1},
  {&__pyx_kp_s_mmstructlib_IO_cif_parser_pyx, __pyx_k_mmstructlib_IO_cif_parser_pyx, sizeof(__pyx_k_mmstructlib_IO_cif_parser_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_s_objbuff, __pyx_k_objbuff, sizeof(__pyx_k_objbuff), 0, 0, 1, 1},
  {&__pyx_n_s_parse, __pyx_k_parse, sizeof(__pyx_k_parse), 0, 0, 1, 1},
  {&__pyx_n_s_ptr, __pyx_k_ptr, sizeof(__pyx_k_ptr), 0, 0, 1, 1},
  {&__pyx_n_s_pyobj, __pyx_k_pyobj, sizeof(__pyx_k_pyobj), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_row, __pyx_k_row, sizeof(__pyx_k_row), 0, 0, 1, 1},
  {&__pyx_kp_s_self_cell_ptr_cannot_be_converte, __pyx_k_self_cell_ptr_cannot_be_converte, sizeof(__pyx_k_self_cell_ptr_cannot_be_converte), 0, 0, 1, 0},
  {&__pyx_kp_s_self_end_ptr_self_ptr_cannot_be, __pyx_k_self_end_ptr_self_ptr_cannot_be, sizeof(__pyx_k_self_end_ptr_self_ptr_cannot_be), 0, 0, 1, 0},
  {&__pyx_kp_s_self_fileObj_cannot_be_converted, __pyx_k_self_fileObj_cannot_be_converted, sizeof(__pyx_k_self_fileObj_cannot_be_converted), 0, 0, 1, 0},
  {&__pyx_kp_s_self_row_ptr_cannot_be_converted, __pyx_k_self_row_ptr_cannot_be_converted, sizeof(__pyx_k_self_row_ptr_cannot_be_converted), 0, 0, 1, 0},
  {&__pyx_kp_s_self_thisptr_cannot_be_converted, __pyx_k_self_thisptr_cannot_be_converted, sizeof(__pyx_k_self_thisptr_cannot_be_converted), 0, 0, 1, 0},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(0, 56, __pyx_L1_error)
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(0, 59, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_StopIteration = __Pyx_GetBuiltinName(__pyx_n_s_StopIteration); if (!__pyx_builtin_StopIteration) __PYX_ERR(0, 79, __pyx_L1_error)
  __pyx_builtin_map = __Pyx_GetBuiltinName(__pyx_n_s_map); if (!__pyx_builtin_map) __PYX_ERR(0, 136, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 148, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "mmstructlib/IO/cif_parser.pyx":56
 *     cdef size_t num_col
 *     def __init__(self):
 *         raise RuntimeError("Do not construct directly")             # <<<<<<<<<<<<<<
 *     def __getitem__(self, size_t i):
 *         if not 0 <= i < self.num_col:
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_Do_not_construct_directly); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "mmstructlib/IO/cif_parser.pyx":59
 *     def __getitem__(self, size_t i):
 *         if not 0 <= i < self.num_col:
 *             raise IndexError("Row index out of range")             # <<<<<<<<<<<<<<
 *         return processOptional(deref(self.row_ptr+i))
 *     def __len__(self):
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_Row_index_out_of_range); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.row_ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.row_ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_self_row_ptr_cannot_be_converted); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "(tree fragment)":4
 *     raise TypeError("self.row_ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.row_ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_self_row_ptr_cannot_be_converted); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.end_ptr,self.ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.end_ptr,self.ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_self_end_ptr_self_ptr_cannot_be); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "(tree fragment)":4
 *     raise TypeError("self.end_ptr,self.ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.end_ptr,self.ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_self_end_ptr_self_ptr_cannot_be); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "mmstructlib/IO/cif_parser.pyx":100
 *     def __getitem__(self, size_t i):
 *         if not 0 <= i < self.num_row:
 *             raise IndexError("Cells row index out of range")             # <<<<<<<<<<<<<<
 *         return Row(self.filePyobj, self.num_col, self.cell_ptr + self.num_col*i)
 *     def __len__(self):
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_Cells_row_index_out_of_range); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.cell_ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cell_ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_self_cell_ptr_cannot_be_converte); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "(tree fragment)":4
 *     raise TypeError("self.cell_ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.cell_ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_self_cell_ptr_cannot_be_converte); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_self_thisptr_cannot_be_converted); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "(tree fragment)":4
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_self_thisptr_cannot_be_converted); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "mmstructlib/IO/cif_parser.pyx":153
 *     obj.num_row = size / obj.num_col
 *     if size != obj.num_row * obj.num_col:
 *         raise RuntimeError("Table data size not a multiple of columns")             # <<<<<<<<<<<<<<
 *     return obj
 * 
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_Table_data_size_not_a_multiple_o); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "mmstructlib/IO/cif_parser.pyx":169
 *         elif isinstance(table_id, int):
 *             if not 0 <= table_id < self.thisptr.size():
 *                 raise IndexError("TableVector row index out of range")             # <<<<<<<<<<<<<<
 *             val = Table(self.filePyobj, &(deref(self.thisptr)[table_id]))
 *         else:
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_TableVector_row_index_out_of_ran); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "mmstructlib/IO/cif_parser.pyx":172
 *             val = Table(self.filePyobj, &(deref(self.thisptr)[table_id]))
 *         else:
 *             raise IndexError("TableVector getitem takes int or str")             # <<<<<<<<<<<<<<
 *         return val
 *     def get(self, object key_str, object default = None):
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_TableVector_getitem_takes_int_or); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_self_thisptr_cannot_be_converted); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "(tree fragment)":4
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_self_thisptr_cannot_be_converted); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_self_thisptr_cannot_be_converted); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "(tree fragment)":4
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_self_thisptr_cannot_be_converted); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "mmstructlib/IO/cif_parser.pyx":222
 *     def __getitem__(self, size_t i):
 *         if not 0 <= i < self.thisptr.size():
 *             raise IndexError("SaveVector row index out of range")             # <<<<<<<<<<<<<<
 *         return Save(self.filePyobj, &(deref(self.thisptr)[i]))
 *     def __len__(self):
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_SaveVector_row_index_out_of_rang); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_self_thisptr_cannot_be_converted); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "(tree fragment)":4
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s_self_thisptr_cannot_be_converted); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_self_thisptr_cannot_be_converted); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "(tree fragment)":4
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_s_self_thisptr_cannot_be_converted); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "mmstructlib/IO/cif_parser.pyx":259
 *     def __getitem__(self, size_t i):
 *         if not 0 <= i < self.thisptr.size():
 *             raise IndexError("BlockVector index out of range")             # <<<<<<<<<<<<<<
 *         return Block(self.filePyobj, &(deref(self.thisptr)[i]))
 *     def __len__(self):
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_s_BlockVector_index_out_of_range); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_s_self_thisptr_cannot_be_converted); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "(tree fragment)":4
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_s_self_thisptr_cannot_be_converted); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.fileObj cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.fileObj cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_s_self_fileObj_cannot_be_converted); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "(tree fragment)":4
 *     raise TypeError("self.fileObj cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.fileObj cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_s_self_fileObj_cannot_be_converted); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "mmstructlib/IO/cif_parser.pyx":282
 *     #    raise RuntimeError("object is not a string")
 *     if not PyObject_CheckBuffer(pyobj):
 *         raise RuntimeError("argument does not support buffers")             # <<<<<<<<<<<<<<
 *     if PyObject_GetBuffer(pyobj, &objbuff, PyBUF_SIMPLE):
 *         raise RuntimeError("Inconsistent buffer object")
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_s_argument_does_not_support_buffer); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "mmstructlib/IO/cif_parser.pyx":284
 *         raise RuntimeError("argument does not support buffers")
 *     if PyObject_GetBuffer(pyobj, &objbuff, PyBUF_SIMPLE):
 *         raise RuntimeError("Inconsistent buffer object")             # <<<<<<<<<<<<<<
 *     ptr = <const_char_ptr>objbuff.buf
 *     fileObj = File()
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_s_Inconsistent_buffer_object); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "mmstructlib/IO/cif_parser.pyx":275
 *             return BlockVector(self, &self.fileObj.blocks)
 * 
 * def parse(object pyobj):             # <<<<<<<<<<<<<<
 *     cdef Py_buffer objbuff
 *     cdef const_char_ptr ptr
 */
  __pyx_tuple__31 = PyTuple_Pack(4, __pyx_n_s_pyobj, __pyx_n_s_objbuff, __pyx_n_s_ptr, __pyx_n_s_fileObj); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);
  __pyx_codeobj__32 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__31, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_mmstructlib_IO_cif_parser_pyx, __pyx_n_s_parse, 275, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__32)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_11mmstructlib_2IO_10cif_parser__Row) < 0) __PYX_ERR(0, 51, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_11mmstructlib_2IO_10cif_parser__Row.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11mmstructlib_2IO_10cif_parser__Row.tp_dictoffset && __pyx_type_11mmstructlib_2IO_10cif_parser__Row.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11mmstructlib_2IO_10cif_parser__Row.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Row, (PyObject *)&__pyx_type_11mmstructlib_2IO_10cif_parser__Row) < 0) __PYX_ERR(0, 51, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_11mmstructlib_2IO_10cif_parser__Row) < 0) __PYX_ERR(0, 51, __pyx_L1_error)
  __pyx_ptype_11mmstructlib_2IO_10cif_parser__Row = &__pyx_type_11mmstructlib_2IO_10cif_parser__Row;
  if (PyType_Ready(&__pyx_type_11mmstructlib_2IO_10cif_parser__CellsIterator) < 0) __PYX_ERR(0, 70, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_11mmstructlib_2IO_10cif_parser__CellsIterator.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11mmstructlib_2IO_10cif_parser__CellsIterator.tp_dictoffset && __pyx_type_11mmstructlib_2IO_10cif_parser__CellsIterator.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11mmstructlib_2IO_10cif_parser__CellsIterator.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_CellsIterator, (PyObject *)&__pyx_type_11mmstructlib_2IO_10cif_parser__CellsIterator) < 0) __PYX_ERR(0, 70, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_11mmstructlib_2IO_10cif_parser__CellsIterator) < 0) __PYX_ERR(0, 70, __pyx_L1_error)
  __pyx_ptype_11mmstructlib_2IO_10cif_parser__CellsIterator = &__pyx_type_11mmstructlib_2IO_10cif_parser__CellsIterator;
  if (PyType_Ready(&__pyx_type_11mmstructlib_2IO_10cif_parser__Cells) < 0) __PYX_ERR(0, 91, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_11mmstructlib_2IO_10cif_parser__Cells.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11mmstructlib_2IO_10cif_parser__Cells.tp_dictoffset && __pyx_type_11mmstructlib_2IO_10cif_parser__Cells.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11mmstructlib_2IO_10cif_parser__Cells.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Cells, (PyObject *)&__pyx_type_11mmstructlib_2IO_10cif_parser__Cells) < 0) __PYX_ERR(0, 91, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_11mmstructlib_2IO_10cif_parser__Cells) < 0) __PYX_ERR(0, 91, __pyx_L1_error)
  __pyx_ptype_11mmstructlib_2IO_10cif_parser__Cells = &__pyx_type_11mmstructlib_2IO_10cif_parser__Cells;
  if (PyType_Ready(&__pyx_type_11mmstructlib_2IO_10cif_parser__Table) < 0) __PYX_ERR(0, 114, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_11mmstructlib_2IO_10cif_parser__Table.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11mmstructlib_2IO_10cif_parser__Table.tp_dictoffset && __pyx_type_11mmstructlib_2IO_10cif_parser__Table.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11mmstructlib_2IO_10cif_parser__Table.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Table, (PyObject *)&__pyx_type_11mmstructlib_2IO_10cif_parser__Table) < 0) __PYX_ERR(0, 114, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_11mmstructlib_2IO_10cif_parser__Table) < 0) __PYX_ERR(0, 114, __pyx_L1_error)
  __pyx_ptype_11mmstructlib_2IO_10cif_parser__Table = &__pyx_type_11mmstructlib_2IO_10cif_parser__Table;
  if (PyType_Ready(&__pyx_type_11mmstructlib_2IO_10cif_parser__TableVector) < 0) __PYX_ERR(0, 156, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_11mmstructlib_2IO_10cif_parser__TableVector.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11mmstructlib_2IO_10cif_parser__TableVector.tp_dictoffset && __pyx_type_11mmstructlib_2IO_10cif_parser__TableVector.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11mmstructlib_2IO_10cif_parser__TableVector.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_TableVector, (PyObject *)&__pyx_type_11mmstructlib_2IO_10cif_parser__TableVector) < 0) __PYX_ERR(0, 156, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_11mmstructlib_2IO_10cif_parser__TableVector) < 0) __PYX_ERR(0, 156, __pyx_L1_error)
  __pyx_ptype_11mmstructlib_2IO_10cif_parser__TableVector = &__pyx_type_11mmstructlib_2IO_10cif_parser__TableVector;
  if (PyType_Ready(&__pyx_type_11mmstructlib_2IO_10cif_parser__Save) < 0) __PYX_ERR(0, 195, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_11mmstructlib_2IO_10cif_parser__Save.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11mmstructlib_2IO_10cif_parser__Save.tp_dictoffset && __pyx_type_11mmstructlib_2IO_10cif_parser__Save.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11mmstructlib_2IO_10cif_parser__Save.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Save, (PyObject *)&__pyx_type_11mmstructlib_2IO_10cif_parser__Save) < 0) __PYX_ERR(0, 195, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_11mmstructlib_2IO_10cif_parser__Save) < 0) __PYX_ERR(0, 195, __pyx_L1_error)
  __pyx_ptype_11mmstructlib_2IO_10cif_parser__Save = &__pyx_type_11mmstructlib_2IO_10cif_parser__Save;
  if (PyType_Ready(&__pyx_type_11mmstructlib_2IO_10cif_parser__SaveVector) < 0) __PYX_ERR(0, 215, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_11mmstructlib_2IO_10cif_parser__SaveVector.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11mmstructlib_2IO_10cif_parser__SaveVector.tp_dictoffset && __pyx_type_11mmstructlib_2IO_10cif_parser__SaveVector.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11mmstructlib_2IO_10cif_parser__SaveVector.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_SaveVector, (PyObject *)&__pyx_type_11mmstructlib_2IO_10cif_parser__SaveVector) < 0) __PYX_ERR(0, 215, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_11mmstructlib_2IO_10cif_parser__SaveVector) < 0) __PYX_ERR(0, 215, __pyx_L1_error)
  __pyx_ptype_11mmstructlib_2IO_10cif_parser__SaveVector = &__pyx_type_11mmstructlib_2IO_10cif_parser__SaveVector;
  if (PyType_Ready(&__pyx_type_11mmstructlib_2IO_10cif_parser__Block) < 0) __PYX_ERR(0, 232, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_11mmstructlib_2IO_10cif_parser__Block.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11mmstructlib_2IO_10cif_parser__Block.tp_dictoffset && __pyx_type_11mmstructlib_2IO_10cif_parser__Block.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11mmstructlib_2IO_10cif_parser__Block.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Block, (PyObject *)&__pyx_type_11mmstructlib_2IO_10cif_parser__Block) < 0) __PYX_ERR(0, 232, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_11mmstructlib_2IO_10cif_parser__Block) < 0) __PYX_ERR(0, 232, __pyx_L1_error)
  __pyx_ptype_11mmstructlib_2IO_10cif_parser__Block = &__pyx_type_11mmstructlib_2IO_10cif_parser__Block;
  if (PyType_Ready(&__pyx_type_11mmstructlib_2IO_10cif_parser__BlockVector) < 0) __PYX_ERR(0, 252, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_11mmstructlib_2IO_10cif_parser__BlockVector.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11mmstructlib_2IO_10cif_parser__BlockVector.tp_dictoffset && __pyx_type_11mmstructlib_2IO_10cif_parser__BlockVector.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11mmstructlib_2IO_10cif_parser__BlockVector.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BlockVector, (PyObject *)&__pyx_type_11mmstructlib_2IO_10cif_parser__BlockVector) < 0) __PYX_ERR(0, 252, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_11mmstructlib_2IO_10cif_parser__BlockVector) < 0) __PYX_ERR(0, 252, __pyx_L1_error)
  __pyx_ptype_11mmstructlib_2IO_10cif_parser__BlockVector = &__pyx_type_11mmstructlib_2IO_10cif_parser__BlockVector;
  if (PyType_Ready(&__pyx_type_11mmstructlib_2IO_10cif_parser_File) < 0) __PYX_ERR(0, 269, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_11mmstructlib_2IO_10cif_parser_File.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11mmstructlib_2IO_10cif_parser_File.tp_dictoffset && __pyx_type_11mmstructlib_2IO_10cif_parser_File.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11mmstructlib_2IO_10cif_parser_File.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_File, (PyObject *)&__pyx_type_11mmstructlib_2IO_10cif_parser_File) < 0) __PYX_ERR(0, 269, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_11mmstructlib_2IO_10cif_parser_File) < 0) __PYX_ERR(0, 269, __pyx_L1_error)
  __pyx_ptype_11mmstructlib_2IO_10cif_parser_File = &__pyx_type_11mmstructlib_2IO_10cif_parser_File;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initcif_parser(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initcif_parser(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_cif_parser(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_cif_parser(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_cif_parser(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'cif_parser' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_cif_parser(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("cif_parser", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_mmstructlib__IO__cif_parser) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name_2, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "mmstructlib.IO.cif_parser")) {
      if (unlikely(PyDict_SetItemString(modules, "mmstructlib.IO.cif_parser", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) goto __pyx_L1_error;
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) goto __pyx_L1_error;
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() != 0)) goto __pyx_L1_error;
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "mmstructlib/IO/cif_parser.pyx":275
 *             return BlockVector(self, &self.fileObj.blocks)
 * 
 * def parse(object pyobj):             # <<<<<<<<<<<<<<
 *     cdef Py_buffer objbuff
 *     cdef const_char_ptr ptr
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11mmstructlib_2IO_10cif_parser_1parse, NULL, __pyx_n_s_mmstructlib_IO_cif_parser); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_parse, __pyx_t_1) < 0) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mmstructlib/IO/cif_parser.pyx":1
 * #distutils: language = c++             # <<<<<<<<<<<<<<
 * 
 * from libcpp.vector cimport vector
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init mmstructlib.IO.cif_parser", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init mmstructlib.IO.cif_parser");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* decode_c_bytes */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    if (unlikely((start < 0) | (stop < 0))) {
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (stop > length)
        stop = length;
    length = stop - start;
    if (unlikely(length <= 0))
        return PyUnicode_FromUnicode(NULL, 0);
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunction */
#include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name_2);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto __PYX_BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto __PYX_BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) ((size_t) 0 - (size_t) 1), const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
